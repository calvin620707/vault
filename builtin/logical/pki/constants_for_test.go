package pki

// This file defines several constants for use in the PKI test case,
// allowing their reuse and hopefully aiding understanding of the test
// suite itself.
//
// In addition to certificates (and their keys), we define the test
// cases used by Test_CAChainBuilding here due to their length.

// Root old is the first generated certificate.
// Root old reissued is the same subject, same key material.
// Root new is a rotated certificate.
// Root alt has the same key material, different subject.
// Inter Old A is an intermediate under Root Old (+reissued).
// Inter Old B is an intermediate under Root Old (+reissued).
// Inter New is an intermediate under Root New.
// Inter Alt is an intermediate under Root Alt.
// CrossOldNew is an intermediate under Root Old and New.
// CrossOldNewAlt is an intermediate under Root Old, New, and Alt.
// InterCrossOldNew is an intermediate under CrossOldNew
// InterCrossOldNewAlt is an intermedaite under CrossOldNewAlt
// CircleA and CircleB are signed by each other. This was done via the
// preserved but unused circleA bootstrap.
const (
	certRootOld string = `-----BEGIN CERTIFICATE-----
MIIDFjCCAf6gAwIBAgIBATANBgkqhkiG9w0BAQsFADATMREwDwYDVQQDDAhyb290
LW9sZDAeFw0yMDAxMDEwMTAxMDFaFw0yMTAxMDEwMTAxMDFaMBMxETAPBgNVBAMM
CHJvb3Qtb2xkMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3p/8x3Dj
ZZ9m8X+8E3BSBvQULgy0cQqR09dgqPo+edaCYdUZm8ecvQ5NGPRvOhAi7YmDWrqd
F/bWL7dgEuEJbROKwRpv53OjABCiy51Fe7R9OpSTjuhoTYGFWMmIIRYDu/psUjBE
sSnYRbRUYziHLu8UODy5bjjeSTrN8M2HNg0JRYhWgBAHecmzGEqoOc1OiFKmumbH
oURV1BNyG3Y7AhX5RkIwsR2mfMHGGA7MBA/jHHZzlwuEovQvs/h7nI//4tpIL3Xx
Wh6XcaiSPxHymBoIk6h6GLMHlb2CkVr5u2a4CRyx2Ez8388ztYmAE5/hxfCIGW5L
MWJBUFpRx1GPSwIDAQABo3UwczAdBgNVHQ4EFgQUCCDsn1vlV4dwW5hKyd0hZXFW
9FIwHwYDVR0jBBgwFoAUCCDsn1vlV4dwW5hKyd0hZXFW9FIwDAYDVR0TBAUwAwEB
/zAOBgNVHQ8BAf8EBAMCAYYwEwYDVR0lBAwwCgYIKwYBBQUHAwEwDQYJKoZIhvcN
AQELBQADggEBALjnWpTPuu4PH1pUh4pJBai5Pf9lLTcvMSxtsRYna+PvHnZ7qBF2
Ugb3YDU1GPwmpVydnlnbouaevGxDu4UwkXJIEQV/I3m6H8j9HfDQ3GZh8av0ZmvP
9/qs3gGswVgrsCVOLAeP9AghFCYAgD8GEBJiugD29Un9Vg4rLCgu/Fd9gTyOji26
TitscSnB0ufe9OiRdv5jHLdZFnhLMwnHTNXbAzYbCl7XsHkSli7NXp1iVAByY1f5
7ZNd0Vqv8dSb2gFcWewg8fMv5+xoi+X0uqJvAOsKeeYRZo95BraCqS7ob6fUekdp
N/MQhjZphhkZjNeGAPM2TqThJfkItZ6fb0U=
-----END CERTIFICATE-----`
	certRootOldReissued string = `-----BEGIN CERTIFICATE-----
MIIDFzCCAf+gAwIBAgICEzcwDQYJKoZIhvcNAQELBQAwEzERMA8GA1UEAwwIcm9v
dC1vbGQwHhcNMjAwMTAxMDEwMTAxWhcNMjEwMTAxMDEwMTAxWjATMREwDwYDVQQD
DAhyb290LW9sZDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAN6f/Mdw
42WfZvF/vBNwUgb0FC4MtHEKkdPXYKj6PnnWgmHVGZvHnL0OTRj0bzoQIu2Jg1q6
nRf21i+3YBLhCW0TisEab+dzowAQosudRXu0fTqUk47oaE2BhVjJiCEWA7v6bFIw
RLEp2EW0VGM4hy7vFDg8uW443kk6zfDNhzYNCUWIVoAQB3nJsxhKqDnNTohSprpm
x6FEVdQTcht2OwIV+UZCMLEdpnzBxhgOzAQP4xx2c5cLhKL0L7P4e5yP/+LaSC91
8Voel3Gokj8R8pgaCJOoehizB5W9gpFa+btmuAkcsdhM/N/PM7WJgBOf4cXwiBlu
SzFiQVBaUcdRj0sCAwEAAaN1MHMwHQYDVR0OBBYEFAgg7J9b5VeHcFuYSsndIWVx
VvRSMB8GA1UdIwQYMBaAFAgg7J9b5VeHcFuYSsndIWVxVvRSMAwGA1UdEwQFMAMB
Af8wDgYDVR0PAQH/BAQDAgGGMBMGA1UdJQQMMAoGCCsGAQUFBwMBMA0GCSqGSIb3
DQEBCwUAA4IBAQCJPYKOPGt0+ujtqujmhbHl0VTC0Q6z4/tHMFpzPr7E21irPT5X
csS0jlUn75oAD3pESOBHQVYdxsQFp0w/DyKV+1L6iodekJ1/4X39iNqY3xDYPFnd
eKBBgRu/2qaLsU0cw9VCMHzto4njqwxzkq+KLjKBoansTpn9o90CdcVVepWPwpyZ
52AVwyfbYV1twaiEXBkC6fopIXqdU7UY7c8PY/KjMWXb79uQLdvIUvOxwo5v29nB
TDywOhgsA/lMSfjya+XEmk7BxzQMXun6fdlPAbtdaRrsiVLnKhNSJ16CspDuVUgU
BazIC7jOIZnshKRBX8zRbK5P65MEEEUzgDT0
-----END CERTIFICATE-----`
	certRootNew string = `-----BEGIN CERTIFICATE-----
MIIDFjCCAf6gAwIBAgIBATANBgkqhkiG9w0BAQsFADATMREwDwYDVQQDDAhyb290
LW5ldzAeFw0yMDAxMDEwMTAxMDFaFw0yMTAxMDEwMTAxMDFaMBMxETAPBgNVBAMM
CHJvb3QtbmV3MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxc+1WiWu
6E/ePlp4QoC3/Pv28HBgHNuiYb1yMWl8YtX11J78zt8VBJb4Ro+xXpyMBp3A3gTQ
16QP3vANAvPFkTXqCRiCcDd5rd08cQL3+FgEQBqVoGuB+vWaxuTmpwG10j1Ze+e5
bsQfjSMRyjrVKFSFx3NiX+My7LgfrccBJ8jmrmnJrS+inJy6jO1KtrPxugV9qBO2
rHNqF/TeAhB6s+ZLw2CHe2EWH5lrPlm0NUIYFromcPpPNkGLRzgFt2A990TV1H+n
yBfiiQSphaKtIramPXKw+PC091dSQPSiZy8UVubcWv3Mpln3L1oWtixGr4tP76ik
fu6sg2zVfx5gYwIDAQABo3UwczAdBgNVHQ4EFgQUFIaDuBzEka3v94EaF2v61WOj
CNowHwYDVR0jBBgwFoAUFIaDuBzEka3v94EaF2v61WOjCNowDAYDVR0TBAUwAwEB
/zAOBgNVHQ8BAf8EBAMCAYYwEwYDVR0lBAwwCgYIKwYBBQUHAwEwDQYJKoZIhvcN
AQELBQADggEBABuC/WcPN7Il3wFxHsveKCyGgllNHZZJQIZHFCGLx6bw6F1/T1Nt
opS804kL7LWz8vcw5ORRq2tRPOQxhE+FCtD0FntW2SJwKoSah1K4fsveMlVscxiO
zZlu92lfhOo900yBWlqw1B+9tVIcPEPqedAbI2AoK5D7Nh+ADMHNFP+Dwy0/P0ga
WlSyIz4V/ti2Q2vKml38b0CIz4gBqi8cFa+3zD6CQ5zqY3WvDZnoaWlvXAsMmnJ8
JQ+L3aJ44NvQzGoX2W1fvoLQCApNR2HaAthKComwuxzM2O/3yJyznavZRP8kTqiM
MjS2ZtJZb5SPDR9klbNWViiVsewyuH0v3rg=
-----END CERTIFICATE-----`
	certRootAlt string = `-----BEGIN CERTIFICATE-----
MIIDFjCCAf6gAwIBAgIBATANBgkqhkiG9w0BAQsFADATMREwDwYDVQQDDAhyb290
LWFsdDAeFw0yMDAxMDEwMTAxMDFaFw0yMTAxMDEwMTAxMDFaMBMxETAPBgNVBAMM
CHJvb3QtYWx0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxc+1WiWu
6E/ePlp4QoC3/Pv28HBgHNuiYb1yMWl8YtX11J78zt8VBJb4Ro+xXpyMBp3A3gTQ
16QP3vANAvPFkTXqCRiCcDd5rd08cQL3+FgEQBqVoGuB+vWaxuTmpwG10j1Ze+e5
bsQfjSMRyjrVKFSFx3NiX+My7LgfrccBJ8jmrmnJrS+inJy6jO1KtrPxugV9qBO2
rHNqF/TeAhB6s+ZLw2CHe2EWH5lrPlm0NUIYFromcPpPNkGLRzgFt2A990TV1H+n
yBfiiQSphaKtIramPXKw+PC091dSQPSiZy8UVubcWv3Mpln3L1oWtixGr4tP76ik
fu6sg2zVfx5gYwIDAQABo3UwczAdBgNVHQ4EFgQUFIaDuBzEka3v94EaF2v61WOj
CNowHwYDVR0jBBgwFoAUFIaDuBzEka3v94EaF2v61WOjCNowDAYDVR0TBAUwAwEB
/zAOBgNVHQ8BAf8EBAMCAYYwEwYDVR0lBAwwCgYIKwYBBQUHAwEwDQYJKoZIhvcN
AQELBQADggEBAIUg2JOsR6Y7R9nEflIsgbrgFH8Z7rVMwUA3bjclIncpVSRneL2k
T0+e5CAG08f2QfywjcjLwTiQCxs6YCxGFC79re6ynmWoVtH7du3edux/+00i8OJD
ZC5XILgoOZgo8KAl7ji7zo+Oo7/i2tL4VqBRHnd6Rk7ddBjod1AZz69RhX6UnPUv
Ci0TnCvjEFqUpz8XTyLISGQJksmyJMcis78NpVxeZRc+mdp4KIuPFMsrU0h2ApoH
74CLZdKXJUhYzJcWplWcQBlv9uxx77K000NuTrfUlIQt8n4Znj4PHntR59gCAUlr
yvZWDxDrvkPY4zv/DrkdEQm+grhlIAd7WmM=
-----END CERTIFICATE-----`
	certInterOldA string = `-----BEGIN CERTIFICATE-----
MIIDGzCCAgOgAwIBAgIBAjANBgkqhkiG9w0BAQsFADATMREwDwYDVQQDDAhyb290
LW9sZDAgFw0yMjA0MDcxOTUyMTdaGA8yMTI0MTIwODE5NTIxN1owFjEUMBIGA1UE
AwwLaW50ZXItb2xkLWEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCn
OdkVg+vMPxMqU/nDwrWOVgBjyfhMkRxmZpaHRN1u92NZtsWjqrRpoFxMPHhQyVSk
xON3BEV8R3cklHvV370WEEas0yDQ8ZfmUyIdvc2rC9nz1WYmFApCNF1KMprlBgNl
HyIbcNjl4JNGejvFx0vMATDrkvNZPWiZtdF7KE2t1N+rB9dy+LM2txofY/BCdGPg
L4OD0C/2htgdGsYRwptO65XJXvAUKSWFw1BRW2q933MSM8NZet6NwOvqf8aCZfYq
C9l8mZHmSFXmWGW6ja0FaXCy19fy02Em3Ble4WEz5q4D+EHr4crzMsakPxOXDsa1
5sgGZ1wIwE+VSd/0xbptAgMBAAGjdTBzMB0GA1UdDgQWBBQwWdezEbMqBLIxQZTJ
67PYGZdy/zAfBgNVHSMEGDAWgBQIIOyfW+VXh3BbmErJ3SFlcVb0UjAMBgNVHRME
BTADAQH/MA4GA1UdDwEB/wQEAwIBhjATBgNVHSUEDDAKBggrBgEFBQcDATANBgkq
hkiG9w0BAQsFAAOCAQEAyZ8N7JdDhNODE6IEAiyCPUaBumXNSF1RjSdvLD7lw9CR
p1bBaPYOTf2+ymAnI8i5aeVo7pw3fJK+lX4MVtLYlz3aJvHSOG5QCjtLOnhrATCB
K6vdR3QLLoh+D7XpbHXBrTNpHrlJw661PF3jNFpGNWwyfNYT6XrVP7MYDzlD8txX
PmCZnRugf79Hipb4D03U/1UT956HuAFbeTYmDqyFE//Di7RJpprNStfaywpuODJi
VWRUADPatSmU+N2hrkYIa5yUfXFy7H/KtnIYvQ3oCnTbqq0OwlKFJ96VfZgmONDs
9N8kNXg3VS/dz/q+wX/o7/suNz72ATgqrTvPeeY8gA==
-----END CERTIFICATE-----`
	certInterOldB string = `-----BEGIN CERTIFICATE-----
MIIDGzCCAgOgAwIBAgIBAzANBgkqhkiG9w0BAQsFADATMREwDwYDVQQDDAhyb290
LW9sZDAgFw0yMjA0MDcxOTUyMTdaGA8yMTI0MTIwODE5NTIxN1owFjEUMBIGA1UE
AwwLaW50ZXItb2xkLWIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCt
f+ClLndXZadsVGVQvQdarOeV9icQmqC3196TrTQjVhPrkUL+7lwE4UNxi5YgsjyQ
lP3tTavEQ9n4riG5UBcRs6CObAhsdDiWbd+p66bKFtrkKPL9ubyXQF0oyrgrc6t7
mOwoDOjcaNdPiz7BkmBP318/8CobboG4lRH1W2/8ZISMzhv5AW6iyl/g+nI3Ojth
NpftkXAfKDXSmMAcR4wscL8vtRB+ipo6HYFx/YAB6nLNx4BwssHXdQ1zFY6pVveO
fM9yVA1BzY0X7RYCYNHJTua/BP9vHXicQcGuPSY6cScXhl1DsE5dfwKk7HjPMlB8
ZrhXMxW5p4LM0Y3qENFlAgMBAAGjdTBzMB0GA1UdDgQWBBT5SYKc2hPBMge1sCaX
nYRE9KQoYjAfBgNVHSMEGDAWgBQIIOyfW+VXh3BbmErJ3SFlcVb0UjAMBgNVHRME
BTADAQH/MA4GA1UdDwEB/wQEAwIBhjATBgNVHSUEDDAKBggrBgEFBQcDATANBgkq
hkiG9w0BAQsFAAOCAQEAKsY+fP6kLoNHGmHnKQAjYcWMQnGhIB7G0EA2Lf4MJZ7k
0UoFUKimvJXqKXLek+FKGXcJaT9iyXG5H508U46ADzo2+ocyZRl7qx3SP9kh4mdJ
twVdTZ08UibESMNZNLUOtjUSkj5KXy2KLmidThFYG7MevaicAjBV0eRFbKU4kLjr
WBJtRju5aule/ZD5iheTsv3vcTVGgy2R97qN0DdwrY2EdzwsDVq6Sk2SbLf4Rv6m
Hnt8bIUPbLJGgFWplcJ9Mrd092P9DsXsxrVeiMyYu6W8kzsqOS5jmll9+BwJyV+G
r1bJrfKV/YLyRowvyWRTOpS5Ndf3nQlyNlPwmBYIWw==
-----END CERTIFICATE-----`
	certInterNew string = `-----BEGIN CERTIFICATE-----
MIIDGTCCAgGgAwIBAgIBAjANBgkqhkiG9w0BAQsFADATMREwDwYDVQQDDAhyb290
LW5ldzAgFw0yMjA0MDcxOTUyMTdaGA8yMTI0MTIwODE5NTIxN1owFDESMBAGA1UE
AwwJaW50ZXItbmV3MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAsRn9
MTpijClANF8DlSTVWcRdfClCSZr77asPV3wGbus5KRabdncNC9jzVkzSNEnNcN9u
YVVBRuiU8ia3yyb6RYl6zYXMXSjs9umByGiQem+Mhy2t4B+gxH+h5lvRaWtgUg12
H22e1J+rCyEhrlH0SjVqIYl1rMOcyiFecgJ5+jrwH/5tCwy+ZO4PKCDXtLKZCzb5
5Cr3kFyotcBDyhAKOmOnZwiyzLUXgWOTz9J8Lb7xEUbtYTW0Kkc/AlVKleYp6S0j
evIvTvqVS0CKFqjIz4d7TTg23vl/bH+lZAULnFiEsixrkvFejMTp30SydtP9Oq1m
2jOVHwhyrnRJfGz03QIDAQABo3UwczAdBgNVHQ4EFgQU5DUnX1zrleGfItZxAezO
j3JF+nMwHwYDVR0jBBgwFoAUFIaDuBzEka3v94EaF2v61WOjCNowDAYDVR0TBAUw
AwEB/zAOBgNVHQ8BAf8EBAMCAYYwEwYDVR0lBAwwCgYIKwYBBQUHAwEwDQYJKoZI
hvcNAQELBQADggEBAHyleRJp9nF2pihj4vG9778HKUzWia74Olr2EaGoEt5NA0hx
O+SgxZAYodhPh9QXISClCEAkrpa5yIKL7bJdWcQ1xkVP9rESohnVEv5qA1nYgnSe
l0sfv8lJQp33POhkV/1iS1z2nfaafsJDTwcWWNHSkirSJNLBS7b2YJ6zlGWJZi1u
AyLB6vUbBSAp9z3kGYBQiFKdNSx3BFTnJ6mCa3CX0ubtMzVVverfEl1RzIKPfKyF
tRhLXdKB/76PotDNG5u+yafGRFyUncWuxtXZnbQp3RKOirgS+tvjUPGW5KQAWqOm
zzjwdmx/MO0Y85tntzo1UsubKXtFY9f4tz6phN4=
-----END CERTIFICATE-----`
	certInterAlt string = `-----BEGIN CERTIFICATE-----
MIIDGTCCAgGgAwIBAgIBAjANBgkqhkiG9w0BAQsFADATMREwDwYDVQQDDAhyb290
LWFsdDAgFw0yMjA0MDcxOTUyMThaGA8yMTI0MTIwODE5NTIxOFowFDESMBAGA1UE
AwwJaW50ZXItYWx0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtJrk
pvq8Epa8ln1xQXGm6gx0+5bHqxKjsmk/efSkWxBmFFYBKtaN+RbvN0rGMUi2hoTC
5knonOAV28HDu++VVaE5IhSyDFkfr4OUJK8w0PEuiRBEnHvQPNe+BYSS9JXLVd3L
737ItDeAO1dgZvCgDhJ7ypvHfgltUxJSPWBnil7Cjl06eNdx89fhrlpBYbgGRleJ
U5LwVvSiAyhq4mNt3Oh4blO5oqJcXQoC2FhUQSqr+FWuu4xYNm36yExRXEVGYHdI
xsfKgd/5LNBx4egQF5MoFKxz8v0hXp/3IN05NCX5UmcpD7S+WCbhIUpdT1mHZnYe
69WjYQHP6j4dra1PkQIDAQABo3UwczAdBgNVHQ4EFgQUgpnIRa051xm8r3Ll9b89
bLD6PUIwHwYDVR0jBBgwFoAUFIaDuBzEka3v94EaF2v61WOjCNowDAYDVR0TBAUw
AwEB/zAOBgNVHQ8BAf8EBAMCAYYwEwYDVR0lBAwwCgYIKwYBBQUHAwEwDQYJKoZI
hvcNAQELBQADggEBAE4Vtk0/kcpW5cVBCBtW3kuqjuDp6AokdTXYmovKMo5rLSjw
yFq/7EqPNfeBgr0atbfHSXHXmd2pND7tW8YaT7psfPB3g4APjvUsyzGQabn6mgBT
H6S+SUcYq/U9nDygtqTRs3SG1RKtNXOMzR4GOQZqfu27Z6ZZZcnIIh/gVeY1LkcF
zjvXh0XlSJk9oI382LTa6v5KVdvO/lxH3w9SlPE+BCZFTQk8jhKjfASIrbJUxvoO
mEYXQz3WT8+1tRBs+o66532Gwic4K1+XzCCY6oWwIs5yFKGK+GpQQId8uyLDrEIc
z2LrGikT1+p7dvfjfzSMwpFki1hukwiTMy6MHsI=
-----END CERTIFICATE-----`
	certCrossOldNewSignedOld string = `-----BEGIN CERTIFICATE-----
MIIDHTCCAgWgAwIBAgIBBDANBgkqhkiG9w0BAQsFADATMREwDwYDVQQDDAhyb290
LW9sZDAgFw0yMjA0MDcxOTUyMThaGA8yMTI0MTIwODE5NTIxOFowGDEWMBQGA1UE
AwwNY3Jvc3Mtb2xkLW5ldzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEB
ANH5ybWadCEgPAk1t8jBoTX/2G/S92D7F1a7oMJxQUHFe+SugmTci0BYGwMlUs5E
TK4lvry9FBE0RXBb+YxreUDGumL5twUlfFPAQNGoe9z3OZ8/cU+DWSFdaDyaa8eH
Gbnx40UGepzk3WTeNr2IFy48v2SSbXv4zsMsXzG42LVaRrKLEhXHkId83a8B1u16
f5Q8Es4sNcMgJZYol5jMilJKHQ0BpiRioIg066aq0SC/oUTxksX8Y1V7W/g12Ntj
Xlly0GyQ6jp/cHVjy+wvmD7IB4M4thMYEkgWFs80meDJGVP5HFN+FCnNdK7F70vI
VJSOZKyJJz053ZaXdXp1EIcCAwEAAaN1MHMwHQYDVR0OBBYEFH7v6owWgu6wCL8C
ovGLXBQWB+OzMB8GA1UdIwQYMBaAFAgg7J9b5VeHcFuYSsndIWVxVvRSMAwGA1Ud
EwQFMAMBAf8wDgYDVR0PAQH/BAQDAgGGMBMGA1UdJQQMMAoGCCsGAQUFBwMBMA0G
CSqGSIb3DQEBCwUAA4IBAQA2xWBbB+MK438cLa3cmCOmeTZ+QL0ETgtWbysYGCrv
m3VzfbZuwAqR6fKc9o4ntLNAaHxeYtCxwEpUmlm2MfBZ9tQhutYjCXKFyBrMIY1L
T6FcLU2Pn22uYBJqYZx+AUyxBkdbaWOTFzkgbvH/gausRW1y2BIuTwOTJElyU/Qu
HbAhGl0zqkZnNzk0PzFIO7lUDISJtGxuvo1cjj7SEa5yfh4Hu5O8y+iEHRUV5P2J
RwCQBXxIb8EUYSy64ceDR/yv+RvpLHVKgyUDguEYdCmcS0PW5yJ22fumCoH9ACcu
QfAnMKPTAvn3JQQliDlnD1eIBbiKSrB3R7oFbpIu/8MO
-----END CERTIFICATE-----`
	certCrossOldNewSignedNew string = `-----BEGIN CERTIFICATE-----
MIIDHTCCAgWgAwIBAgIBAzANBgkqhkiG9w0BAQsFADATMREwDwYDVQQDDAhyb290
LW5ldzAgFw0yMjA0MDcxOTUyMThaGA8yMTI0MTIwODE5NTIxOFowGDEWMBQGA1UE
AwwNY3Jvc3Mtb2xkLW5ldzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEB
ANH5ybWadCEgPAk1t8jBoTX/2G/S92D7F1a7oMJxQUHFe+SugmTci0BYGwMlUs5E
TK4lvry9FBE0RXBb+YxreUDGumL5twUlfFPAQNGoe9z3OZ8/cU+DWSFdaDyaa8eH
Gbnx40UGepzk3WTeNr2IFy48v2SSbXv4zsMsXzG42LVaRrKLEhXHkId83a8B1u16
f5Q8Es4sNcMgJZYol5jMilJKHQ0BpiRioIg066aq0SC/oUTxksX8Y1V7W/g12Ntj
Xlly0GyQ6jp/cHVjy+wvmD7IB4M4thMYEkgWFs80meDJGVP5HFN+FCnNdK7F70vI
VJSOZKyJJz053ZaXdXp1EIcCAwEAAaN1MHMwHQYDVR0OBBYEFH7v6owWgu6wCL8C
ovGLXBQWB+OzMB8GA1UdIwQYMBaAFBSGg7gcxJGt7/eBGhdr+tVjowjaMAwGA1Ud
EwQFMAMBAf8wDgYDVR0PAQH/BAQDAgGGMBMGA1UdJQQMMAoGCCsGAQUFBwMBMA0G
CSqGSIb3DQEBCwUAA4IBAQBfU4D7iU+HfuTaDeX22XFGe9nnLHehTwUelOZTNJZ3
/Ais/iGreOuYhlfb9JQteogHgrONKZuLGtZeSnlnOkFWaW1kjvmZ0xAvzBDT0y2F
dLnF5C6cDfO51APicljBxhcqgGq/11GhaOWHEtlXNKR7BiOsjlmaeLQ/fgwLB8sv
2ncvnXlCVGQe5HFWBSCP0p0T8mMaG+jdSeHzl6kqqYM3oeauyIyOhzqY8ma5IYjI
zWWo2PRGLIfIUB5pYz9bSrGy2AIia7y+UXhDOECukhdQVja2ynqCbT/IvOiVUaQx
2hcsyTMRlNjCj5Xsdjwc/z8oBnUcleI/cOgfdj+qF373
-----END CERTIFICATE-----`
	certCrossOldNewAltSignedOld string = `-----BEGIN CERTIFICATE-----
MIIDITCCAgmgAwIBAgIBBTANBgkqhkiG9w0BAQsFADATMREwDwYDVQQDDAhyb290
LW9sZDAgFw0yMjA0MDcxOTUyMThaGA8yMTI0MTIwODE5NTIxOFowHDEaMBgGA1UE
AwwRY3Jvc3Mtb2xkLW5ldy1hbHQwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK
AoIBAQDQ3xEQsfjBr26hdGhn9KdossH2I/Rb+dYyXR9xbftfZGlNBs8ZCTab13bk
DbQXZFQD/mXmNcpw/YeCpi8ZOo5YNfUpll4XlTdXixUsxoQrXdcQ2DzDETagisY0
Vj+slFXPAnAZkpGPjJjLX+74iOJOL8Vn3NjcmCcneh3kAKKn1EbE7XP3SE+q1aoi
SV8BXi03JmNPGZhZlhfD9/WOZCnMHwAgFiHtEK/VA4BokM2xbPGUIiDP3RqpKTt0
QsR2pB6NnSvTlOFbNEjILqb9GhTt+orthhH9aZR8S+ribFUE0t++qbLnNJgu4snu
VvICxIAMkKpl9CmpGGbNRicWNP2LAgMBAAGjdTBzMB0GA1UdDgQWBBQ/qzK96SoM
WmA45DzY866+Kq/8mjAfBgNVHSMEGDAWgBQIIOyfW+VXh3BbmErJ3SFlcVb0UjAM
BgNVHRMEBTADAQH/MA4GA1UdDwEB/wQEAwIBhjATBgNVHSUEDDAKBggrBgEFBQcD
ATANBgkqhkiG9w0BAQsFAAOCAQEAil3BQFkhjoU0T/ebWewQZw60itr2liiPJMCe
5ow/xbb4XWHER42/qj2ijgQoZ1GWjY+piAVX4hd3eKCTWgMc4YtTsxVIUlPpbyfv
U9cWGjAXMdl+KEpsRG0XTiWmq9l8QDbsWsjFrxPc5oGdVJmd5tvfQUVovKlAbM/h
TdXSJJdd2QHPMcy5jR1pTUBgKTGmtNfP9Brq25SNydCuAp39WHSkCQ4L2i8tlwSV
rEdy6Wr6FdaZTbw4FhwO1/ZIdoIxCZOGo+zmvQlABDPDJDGVIH0+cy1KycUKcGO8
wS/4rXnl/NaJzEiT3Synt6PTyQisPrEDMeB4gVf2XrI69FanBg==
-----END CERTIFICATE-----`
	certCrossOldNewAltSignedNew string = `-----BEGIN CERTIFICATE-----
MIIDITCCAgmgAwIBAgIBBDANBgkqhkiG9w0BAQsFADATMREwDwYDVQQDDAhyb290
LW5ldzAgFw0yMjA0MDcxOTUyMThaGA8yMTI0MTIwODE5NTIxOFowHDEaMBgGA1UE
AwwRY3Jvc3Mtb2xkLW5ldy1hbHQwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK
AoIBAQDQ3xEQsfjBr26hdGhn9KdossH2I/Rb+dYyXR9xbftfZGlNBs8ZCTab13bk
DbQXZFQD/mXmNcpw/YeCpi8ZOo5YNfUpll4XlTdXixUsxoQrXdcQ2DzDETagisY0
Vj+slFXPAnAZkpGPjJjLX+74iOJOL8Vn3NjcmCcneh3kAKKn1EbE7XP3SE+q1aoi
SV8BXi03JmNPGZhZlhfD9/WOZCnMHwAgFiHtEK/VA4BokM2xbPGUIiDP3RqpKTt0
QsR2pB6NnSvTlOFbNEjILqb9GhTt+orthhH9aZR8S+ribFUE0t++qbLnNJgu4snu
VvICxIAMkKpl9CmpGGbNRicWNP2LAgMBAAGjdTBzMB0GA1UdDgQWBBQ/qzK96SoM
WmA45DzY866+Kq/8mjAfBgNVHSMEGDAWgBQUhoO4HMSRre/3gRoXa/rVY6MI2jAM
BgNVHRMEBTADAQH/MA4GA1UdDwEB/wQEAwIBhjATBgNVHSUEDDAKBggrBgEFBQcD
ATANBgkqhkiG9w0BAQsFAAOCAQEAnXlVvlhbrmfQcLhLaUGALpNWp939pVD1to30
oVdi11/CuPqapc5e5l3cCb3z/pAEo8EtelavoARkxPmDUhH0VqloAPv8hh+6g0UQ
nTJvXqul+EsPZ8QtTz8PgXZU6F521VrVLW+QDQTj738bpkpkMTkwGytHlaVddHck
F6pXHYPzMDkVULkGjSxMRYaKb1kozQqCm11za+yS0ahBhMEnMr21aXzM/nn91/q4
26Vf3YKaaN1IMFh0vyCotkyr8dbCHDUxQghFxTuj3b8EOE+INXHIi3FkaA4EOD58
lu9HJC6oLMccvu5XcFbxtrjg/3E8jTeetkc0TlfhvQNuPGGxeQ==
-----END CERTIFICATE-----`
	certCrossOldNewAltSignedAlt string = `-----BEGIN CERTIFICATE-----
MIIDITCCAgmgAwIBAgIBAzANBgkqhkiG9w0BAQsFADATMREwDwYDVQQDDAhyb290
LWFsdDAgFw0yMjA0MDcxOTUyMThaGA8yMTI0MTIwODE5NTIxOFowHDEaMBgGA1UE
AwwRY3Jvc3Mtb2xkLW5ldy1hbHQwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK
AoIBAQDQ3xEQsfjBr26hdGhn9KdossH2I/Rb+dYyXR9xbftfZGlNBs8ZCTab13bk
DbQXZFQD/mXmNcpw/YeCpi8ZOo5YNfUpll4XlTdXixUsxoQrXdcQ2DzDETagisY0
Vj+slFXPAnAZkpGPjJjLX+74iOJOL8Vn3NjcmCcneh3kAKKn1EbE7XP3SE+q1aoi
SV8BXi03JmNPGZhZlhfD9/WOZCnMHwAgFiHtEK/VA4BokM2xbPGUIiDP3RqpKTt0
QsR2pB6NnSvTlOFbNEjILqb9GhTt+orthhH9aZR8S+ribFUE0t++qbLnNJgu4snu
VvICxIAMkKpl9CmpGGbNRicWNP2LAgMBAAGjdTBzMB0GA1UdDgQWBBQ/qzK96SoM
WmA45DzY866+Kq/8mjAfBgNVHSMEGDAWgBQUhoO4HMSRre/3gRoXa/rVY6MI2jAM
BgNVHRMEBTADAQH/MA4GA1UdDwEB/wQEAwIBhjATBgNVHSUEDDAKBggrBgEFBQcD
ATANBgkqhkiG9w0BAQsFAAOCAQEAEJuEPQG5RrRAoQnvNcX0IaM+229e+n1QAzeU
qv3Aa+u9zf9hctHmoryvtIU01K0M0Bw3fecIYExem8xH/iRFicWlGOgmYOuCs3xW
QjFDP4PRltaLXEQW66QZ5dpeTt2qEX8ivY1y73NLEjJD1pXATHKYC4lowI/Be3IT
NJYAjR3oggYcQvDYCJ/LVmy4sIXqsl50/gc9YmLsmyQ5yvZMvuUYyph4D8iejKCF
sBZ2l9mkSdO/PhGW/9fedpri5dHdy6rDPXUH0H4ZxSkYeJWVujQuYrcmR/yyIi5K
ZGLmDg8NagSGxibWbsUo/rZl12b6ClHmZw9c2mRgTlF16tlt1w==
-----END CERTIFICATE-----`
	certInterCrossOldNew string = `-----BEGIN CERTIFICATE-----
MIIDKTCCAhGgAwIBAgICAwEwDQYJKoZIhvcNAQELBQAwGDEWMBQGA1UEAwwNY3Jv
c3Mtb2xkLW5ldzAgFw0yMjA0MDcxOTUyMThaGA8yMTI0MTIwODE5NTIxOFowHjEc
MBoGA1UEAwwTaW50ZXItY3Jvc3Mtb2xkLW5ldzCCASIwDQYJKoZIhvcNAQEBBQAD
ggEPADCCAQoCggEBAPBcrSIJceNdGRr8XdzgbNcgJhYpBCjQsinwPU/a+/tqYJCF
ODo00+jObuZhYYNFfbdQORy1qt6sb66BfpGNG7BPnksBq821KL5wI958HvzARwz0
SC66ZNJYCxudkI432I1CGvTD4rDgyhB7iIBSiUPU/EjWYlXrXzBKpR3Oi7z8Zb4b
U6k1T6cA8hUyXWL+x1gqDHA/w9eK4V5IF5Cxhj8MBGCWfPA31WqYeRSD9ru2MA3j
blspgegDV5NpkozHsq0W4R2L1mwGbFLTguswjf4mjYJO8Oyq1OTX9lmB3lmqJD63
7URhDaH4TDyyrcPKqnNRthDjH5jyBF5dq8Bk+t8CAwEAAaN1MHMwHQYDVR0OBBYE
FMbzwh7TVo95G83ub3xlig3H2PTCMB8GA1UdIwQYMBaAFH7v6owWgu6wCL8CovGL
XBQWB+OzMAwGA1UdEwQFMAMBAf8wDgYDVR0PAQH/BAQDAgGGMBMGA1UdJQQMMAoG
CCsGAQUFBwMBMA0GCSqGSIb3DQEBCwUAA4IBAQA0v+UApHxZY999tVAbUpMcb5WF
/6Ih0LdvxaqpARMRpn/wDSPK/gzc8EHBUUCvZMbV46snJ5FfOgN6y3CQUad4NgOl
suwT3I9nPF/dIuJUZYuD+Q49/nvFiJhvZJyJEi5oogHXPu1e33djppQ5imnWaoZ4
tZCDA3fwY5y3mxKyNtGh3iLY2KaHoh4JbsTQ9IqUGt0sm6DNlg8Bs98ZyDWM4L2M
xCrhQZHdcrB+N5F+mgDiv1zXhjHbK5FxkaQwZJ1ap+GJqXKGhQClnQ/jEPmmWj2m
xsg7yKhvGpfedw2E7+PYoBS0uc5GSEi51wMtf4rne4gcNgc3UkqKgU2aIZAn
-----END CERTIFICATE-----`
	certInterCrossOldNewAlt string = `-----BEGIN CERTIFICATE-----
MIIDMTCCAhmgAwIBAgICAwEwDQYJKoZIhvcNAQELBQAwHDEaMBgGA1UEAwwRY3Jv
c3Mtb2xkLW5ldy1hbHQwIBcNMjIwNDA3MTk1MjE4WhgPMjEyNDEyMDgxOTUyMTha
MCIxIDAeBgNVBAMMF2ludGVyLWNyb3NzLW9sZC1uZXctYWx0MIIBIjANBgkqhkiG
9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3DkwTH5vrQLnUZ+GqTn8QgqPMBWGgogoxzZW
jMzbfk5YKAP1ZM+nX1fAoxI+qPhHIs99CvfBLGdiyqREgRVSvIzFxwrd7fRo9kUO
078VTl3vf5e/2wdHrSwMGVMjNFY9rOb1rpxluA9SJTBs9mCFNzrIOLzVBlqH+sCB
ozUxA4xR/UWyDLCi9YB9iMlVTF0s6X5OGOYyxc4jKozxyqYDsVJxnIR0IXLfqa0N
OHj7hzjMI6C0spehK41r5OTmaV6rsuDgSOJ66kNoPchz/neZge8tclSQuB4Tljb/
QBHOwFlfk9kJwHuu98SIyKcFwBA6g5APqdZQPr7PLzcvQyvEKQIDAQABo3UwczAd
BgNVHQ4EFgQUfGmXAt8N03NsSR5gp22zm64zMRcwHwYDVR0jBBgwFoAUP6syvekq
DFpgOOQ82POuviqv/JowDAYDVR0TBAUwAwEB/zAOBgNVHQ8BAf8EBAMCAYYwEwYD
VR0lBAwwCgYIKwYBBQUHAwEwDQYJKoZIhvcNAQELBQADggEBAEr6S97HoaYa6bSO
3+YzvaBd1nB5Xd1mJyyx8DLVdiq2XmtOOb3yUvBRvgKc7vwVXSg1YkmJqM5wMk5e
PTZHWdo8OFwqq7ftIWm+sGA9qVJwcQKDU15nDOZsCVNDA1Xk77GpnjpAgPX7WsHJ
jynpLRMv/l80zDp+xzekRfGd/Q9mmX7VcRX75YcJazK673jGnj4l1Z3bwD10tvyq
zDEownzzp7Oof5Gc63LP+oUJGScG/jv+VxWooLZr8mga/pwZW/gj95USFpBpggwR
qeIVo23/HXj5SkymtSn92G+S2G3kvzj2rTHwNg2WhEsY93ZfBUroGI0mbQelU5Ql
oAaxDjk=
-----END CERTIFICATE-----`
	certCircleABootstrap string = `-----BEGIN CERTIFICATE-----
MIIDFjCCAf6gAwIBAgIBATANBgkqhkiG9w0BAQsFADATMREwDwYDVQQDDAhjaXJj
bGUtYTAeFw0yMDAxMDEwMTAxMDFaFw0yMTAxMDEwMTAxMDFaMBMxETAPBgNVBAMM
CGNpcmNsZS1hMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAppLxvknG
t7yA1QuhL7FloG2NL9LjFQYaK6FQA1WlhfalNJpH2JhFHGIkq67RxWTBw/iyFkrO
e8ST5Qr1uyt7BcB5kUEtma1F+KtSBAjibA4Q/lJ4U7tJTdQ7uS8hvN8nNoFymZIk
FDYz2GTlK5BOwpey0aGwRqDDDHmZVvdSnmpPaJUILH0i3fICJXbCntkwOwRV4Ydf
uWZdCU7HJey98pKYxiDwFmU32r2f6ZWrAi3ciz51bY4K+8zRHv8XVuaZe403IMCz
PoRVpJuid8Xsm8yiD7C4uTvMHKv6W/pR3P9HDEj4IAe9tc0zmQXAlJqa/qF2QoaP
wQsbcsDQSnFvqwIDAQABo3UwczAdBgNVHQ4EFgQUUeU/mVsNyXwyyHU1+99H/IqM
QD8wHwYDVR0jBBgwFoAUUeU/mVsNyXwyyHU1+99H/IqMQD8wDAYDVR0TBAUwAwEB
/zAOBgNVHQ8BAf8EBAMCAYYwEwYDVR0lBAwwCgYIKwYBBQUHAwEwDQYJKoZIhvcN
AQELBQADggEBAAm4ctNdYHe4SXwDWtYCcP9MHHiOqxP29KxwoYvPx0RH7ZQl3BpV
rFSXtRqi6pj6EFKlivez4oL4zvTIPIQZTUOtnXbYVA4J8n9SNkTcLXJLbodCW/+k
0X8jyoDp7yPe7QKQPghy+Qgr0Yu2P5W4nU3CiGQUFgwasT0WIAI28rfdF5n1wxBJ
A2bkHJFc82KpEISEqrWk4NzTZxJJsdw0QWkBykg8492tAP8/8Zidlwz9x7T5yYOU
d+slBzZQ1y9p7dL4x755hMbKtGmgVJ3iY+JDa7DsT/pANyF0xlOTe6/oAyVeqpTs
G5yFuBa9aLl3dcTLLOLt6gLxZeJ02/DT018=
-----END CERTIFICATE-----`
	certCircleA string = `-----BEGIN CERTIFICATE-----
MIIDGTCCAgGgAwIBAgICAgEwDQYJKoZIhvcNAQELBQAwEzERMA8GA1UEAwwIY2ly
Y2xlLWIwIBcNMjIwNDA4MTMwNjExWhgPMjEyNDEyMDkxMzA2MTFaMBMxETAPBgNV
BAMMCGNpcmNsZS1hMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAppLx
vknGt7yA1QuhL7FloG2NL9LjFQYaK6FQA1WlhfalNJpH2JhFHGIkq67RxWTBw/iy
FkrOe8ST5Qr1uyt7BcB5kUEtma1F+KtSBAjibA4Q/lJ4U7tJTdQ7uS8hvN8nNoFy
mZIkFDYz2GTlK5BOwpey0aGwRqDDDHmZVvdSnmpPaJUILH0i3fICJXbCntkwOwRV
4YdfuWZdCU7HJey98pKYxiDwFmU32r2f6ZWrAi3ciz51bY4K+8zRHv8XVuaZe403
IMCzPoRVpJuid8Xsm8yiD7C4uTvMHKv6W/pR3P9HDEj4IAe9tc0zmQXAlJqa/qF2
QoaPwQsbcsDQSnFvqwIDAQABo3UwczAdBgNVHQ4EFgQUUeU/mVsNyXwyyHU1+99H
/IqMQD8wHwYDVR0jBBgwFoAUiCMHZko3F/5YbwjbJ6jI0bwAQLowDAYDVR0TBAUw
AwEB/zAOBgNVHQ8BAf8EBAMCAYYwEwYDVR0lBAwwCgYIKwYBBQUHAwEwDQYJKoZI
hvcNAQELBQADggEBAC4NQH8wZpPwgwpQMfII7raZ2fPj9b2ZYvLUqDIPXjSjyY/g
mJv6CVWDHrMHXFNABoUFCagYeuH14+L84umTGT3e0in+/ytfUdOMk1nZGCzMm7vD
uS/UOIxaRa2plmoduiLjbmWxWge60ATkuEkwoJ+Z2ZvZtdaozbCHavchCFzDk3Qq
bHuyaTDTGJyUqzkOXHlRQFttCzbw+Ef/lelku1npcTgCxHTQW1QwMDGFCJ1/67qC
kgY9TM90wFjWOdtPZcVcowhrwdxOUyV6WVhuaI9JQP+xRDv55iQS4/Obzz1EJUzp
ax5MubC17A7NCW1I411FOx+hJV9t7qgaWMHOOH8=
-----END CERTIFICATE-----`
	certCircleB string = `-----BEGIN CERTIFICATE-----
MIIDGDCCAgCgAwIBAgIBAjANBgkqhkiG9w0BAQsFADATMREwDwYDVQQDDAhjaXJj
bGUtYTAgFw0yMjA0MDgxMzA2MTFaGA8yMTI0MTIwOTEzMDYxMVowEzERMA8GA1UE
AwwIY2lyY2xlLWIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCl72Dj
9GMd2ZcZsTT6ocGV8JIYI6QSYX/WhRWRYIV7uHRL7+W1BrUsgikSuR/xOD50YjTx
0BLUtRp/PXvEPLTBKHUB8AXTd0iNVQ7A+Jel5kWCwTaTDeAAFkICTsubVa42fgqs
0s6hmOp7aOEC/qTFZXQItQrRGJ0kwDofnfJGDmZewIHEEsxLZduezYn+zQeNK2d5
nusoiC+yw5kFYASDXQ3nQJ3DmEpeTJepqlvPJCJYcqOAyQl3+/tP3vw6x5aJVJbh
H8iYIjtmRiB2vP9q8mNHjqRIMCt5ZRyQZI1a8KXIe0l1RLCa+BGkSaSh0t7Ln/t1
eKHXpxgCHK7KDm4vAgMBAAGjdTBzMB0GA1UdDgQWBBSIIwdmSjcX/lhvCNsnqMjR
vABAujAfBgNVHSMEGDAWgBRR5T+ZWw3JfDLIdTX730f8ioxAPzAMBgNVHRMEBTAD
AQH/MA4GA1UdDwEB/wQEAwIBhjATBgNVHSUEDDAKBggrBgEFBQcDATANBgkqhkiG
9w0BAQsFAAOCAQEAdqeIq/vCME1swzMFefjDOQw4uInnyBtpxtpm/9YyIQGcH28h
6sD0CIXFk2OIWzPqoRffmYTVuqxvMgZEmmOlMN2PSJBhhIoE3V50IXI9J2ZrIL5c
PRxp0pjnNGUC19nya10iLhG2rzFJnUAuh6lVL1ryVpozNfHaCPdpopS2m7TIgQnx
VuEtvOer456aPtkWazXMtpN7+jDAJXzJPaco+AVx4O1MOeJY3fJy7m7f3JpPqnWq
kFfCRSWkVq0CMJfbN9O2Y4FGXwL8JupMEdk2CGnaSSlz0lemlz21+itSuTyLSElo
LZZLrzEmG8GoOfl6Vom6wGLkjEVkTXp6LCMFnA==
-----END CERTIFICATE-----`
)

// Keys for above certs
const (
	keyRootOld string = `-----BEGIN RSA PRIVATE KEY-----
MIIEoQIBAAKCAQEA3p/8x3DjZZ9m8X+8E3BSBvQULgy0cQqR09dgqPo+edaCYdUZ
m8ecvQ5NGPRvOhAi7YmDWrqdF/bWL7dgEuEJbROKwRpv53OjABCiy51Fe7R9OpST
juhoTYGFWMmIIRYDu/psUjBEsSnYRbRUYziHLu8UODy5bjjeSTrN8M2HNg0JRYhW
gBAHecmzGEqoOc1OiFKmumbHoURV1BNyG3Y7AhX5RkIwsR2mfMHGGA7MBA/jHHZz
lwuEovQvs/h7nI//4tpIL3XxWh6XcaiSPxHymBoIk6h6GLMHlb2CkVr5u2a4CRyx
2Ez8388ztYmAE5/hxfCIGW5LMWJBUFpRx1GPSwIDAQABAoIBACpYoEqHjJmd8oTp
WSsRaGjuMJB51jDSY965zycVQqEGTpKxaEebdpL3j265wBZ5T0uDprqxWIRgbWly
JhIxQAvBddk5YCPUeSLgBzdX2Qmo0VE9RbwfNQfZJTY4T26Ls3YkMkqH5+kTHpJT
tOGStRQWYfA4jMUMiCvBxb6SOa/r+/HqTtSPsEBGRl586Fm9UbGVLC7Y2KQyp356
htOFWOVs2qtsgTs1J2RE7p7XH/Xkc59iiTMnRwAqGAUw+aAMzdTI9KfpGp2r7iZE
N2uOQhom9U/YBwJjvO5EGZ/qXWWRnrLMW1gTilRV/M6fNdHGmqwrS54GPXyYbBFB
Le6BZfECgYEA+xF1u0MYPb6aYm+WNNU7sFYiPWdTjGLM9jlscx7TJ3+mvlUEorGi
miiI5xNZvkdg58tY946k/3J4a1NtjmlIl5a5eutC8omSgiLDynEiCD+HN376o502
Mp86eoPYKQGYxJOh9IkvsMuM70FFNHHOaQsN3NkkAPMN9WRlYmBMh8UCgYEA4v9+
5a7uaC/G0L77CSsIvNEo8PFirLQmtwXEVeTFUkrUGbWpj1Fzrxuo5YMsGqdb3M3O
PsKcHZ40YXM1uiCKmmnOi/HQdBl6tqzGrm1Czh8NI6jWmsFq2z8wBxuZS7Ik73dj
XeP7MwcmhUC4rwFiKHXDK9xTFuL8113nug6GG88CgYEA96K8De1avqP+YLMRY6Ei
k4YRlaERrjlRUldHWbEAskfdLoRq4xH0gLsUdV8HuH9s3JQcd2ix4+eDUNDkEYBV
Ane/ELd1vAXnhQZHOakm2R3X/+v1yWVqLLoTEv5yOdgCV3oKV0jsyiOrKd2mJdlO
rxshHEDsmychEHZq7YJwWcUCgYBUqm8uQ/zwJ0HEgjcnyEFOC8V1eNMRD3CROzlr
wBRJCVfq7vL7XaoEWhC46h/9IQcGaEzQ481Ozr9CybH0ZkbMKUK8t8jEROycTf0c
+eu87Z/8+PBycEnm1L6ZKBYZQay9FI6fanU7JyOa9/TqcV2nMaVGKrtjAe7EdWYE
433pyQJ/D7pYmpg6BRs+dxA1FccLrOg2pXT0cCGK4rJec7rfL/9MTKGlikUOW/3R
2KLYitkCmGfIP03xyz3aV9QD/jojjjtf8wjGYUaJoI0ofqUtWlRqg7x9tx6zlcJc
SKlS0pGvH90sBxXO9l/tDjA91LikkgJrXIki08Iawy8ju83iXQ==
-----END RSA PRIVATE KEY-----`
	keyRootNewAlt string = `-----BEGIN RSA PRIVATE KEY-----
MIIEowIBAAKCAQEAxc+1WiWu6E/ePlp4QoC3/Pv28HBgHNuiYb1yMWl8YtX11J78
zt8VBJb4Ro+xXpyMBp3A3gTQ16QP3vANAvPFkTXqCRiCcDd5rd08cQL3+FgEQBqV
oGuB+vWaxuTmpwG10j1Ze+e5bsQfjSMRyjrVKFSFx3NiX+My7LgfrccBJ8jmrmnJ
rS+inJy6jO1KtrPxugV9qBO2rHNqF/TeAhB6s+ZLw2CHe2EWH5lrPlm0NUIYFrom
cPpPNkGLRzgFt2A990TV1H+nyBfiiQSphaKtIramPXKw+PC091dSQPSiZy8UVubc
Wv3Mpln3L1oWtixGr4tP76ikfu6sg2zVfx5gYwIDAQABAoIBAB9hpVao1ce7K/ne
Zme+ffHfkzxvx3+shGVXJa+bGYWghgB2PIshLvdsb/TZxPzKfxhpnHhccTlUqMPo
d1f5jmVMFVXeEot08ZPYnkcbfnVimUIGNaiehZ9nqWdWVxU1mz/ARdr3Vx6wdITy
hFb94GUmi5apwniN1b1iNHxgLtm9qJVIqxTajwEgiIFuSRA5D9yYrrjpFn4SbGO4
yJF1KBhIsuhgTG2F1rQm2b8MTCGvjLtKIapVWAkvPlGyjEe9FvORzhUtXIkHa+nC
57+/d2edYx0mnodNiXUqmh/aNsbBZAI8A4busP4+G11nhguQLf4DTxxh80vZo8e1
n3XZMukCgYEA/hy927XEHrs5NKCOfDeU+8bcBOtpAHDzIhMWHLJ09l8IhumTJGGG
7r5tlmi6FPGVizOraSbC0nnm92M/f/eZiXIzV18mFpcOk1zgCf+5YeWIAuSnSsLk
w5FOdkgwHEonY6RxdeUkBfk1439PFIcLMZGlTnFvLs+8JqahjpSArp8CgYEAx0fl
fOlrLIcPa/jb7Qph9NmqESkCrZYD83Y6UaqrEJICTdLnJaXMwOz2zAv22uzQUQic
OKloNMBPqFQhJm2s+3cv75li4aw/lCKxR2IUjUZF420KcNNIxDLxBH06czqMXKt3
GuUwLZ/kPY7Ue7fzazE4PeybBZuTJpCaJqY/a70CgYBwF2OUgFiTqcixM0XG+4mn
im/RZ7p4rFpDpKGzZPD9IKyVPoFeofqwY6XZnDbBOFPcBJ3PE38K8yTz6X7ARwse
Oxb0qo8VleqjDGvzXS98RJC7nftBmjjpH7a5rFw0jm1Tod0+wSYj0Gt5/9V1W6CP
bAy8ToNZ5d68OfK3/z/IRwKBgBydBCR1V4AjPGGib+GPNhV0E2k3XD0UZyjT9ve2
660Lae1GtQ3Ayq+A1sbhiOZSTm70L4orON0qJ8XhnojoAohwyp86hOomU1Kv0IiR
WqYWSv6mr3MXw0D4l4avfG8DHxhHPmjMM6i5Zoo4MeY5uWfQv2SUzoV1myFUbe3S
vRR5AoGBAL6P3Z3AF+DbanGw0EkqN1dvXuTcaOLzDPBxKTGnzpkFApEiBnBKIaS7
t80nxrfIP+oQLiCwca6he0pIGcWHU1coTlnaA4AzXn1jp1ZnymIc+CN/cjlvShka
xnERJmz7heqLBhk2GsbIXIa1F4lW5EIaTgtHVGNUG7veXSeEMEsF
-----END RSA PRIVATE KEY-----`
	keyInterOldA string = `-----BEGIN RSA PRIVATE KEY-----
MIIEowIBAAKCAQEApznZFYPrzD8TKlP5w8K1jlYAY8n4TJEcZmaWh0TdbvdjWbbF
o6q0aaBcTDx4UMlUpMTjdwRFfEd3JJR71d+9FhBGrNMg0PGX5lMiHb3NqwvZ89Vm
JhQKQjRdSjKa5QYDZR8iG3DY5eCTRno7xcdLzAEw65LzWT1ombXReyhNrdTfqwfX
cvizNrcaH2PwQnRj4C+Dg9Av9obYHRrGEcKbTuuVyV7wFCklhcNQUVtqvd9zEjPD
WXrejcDr6n/GgmX2KgvZfJmR5khV5lhluo2tBWlwstfX8tNhJtwZXuFhM+auA/hB
6+HK8zLGpD8Tlw7GtebIBmdcCMBPlUnf9MW6bQIDAQABAoIBACgQzhg/kUFQY3Ei
yZbDkehWZqWCAIGnytwl/C7QqxUpJJ6cEeJSxgMArtx9KH6CnksT+UPMvDE4li0n
fjwR7SXaJHTH6Pbmy3QduvDRRvOSVVf8awr4hjSygx+B3Ga++BVETlGwyebZ1a9v
Hd8XDuwD5QqsHK3m7qbVTylo0KOzF+4NtOhtCxH/KcjG3ULdKyNz05a4/rZzvFDa
wYK39q7ivwm5yaLbt9RDhjh+BSfriOwhriIpqbU8mSQ8nzYaBV8Fz/YdZteNffZY
M1VP8j+8GdXqixAz4JCJrIMeOuwDlYGJya2FunK0ghU2jMgdd0HXhZFVHorVcUxT
O9O0RIECgYEA1EFVG4y6mN8jXbyNy4PmPVClvF74PFQx2J+XZKuddanB1DvkciiI
Kp628jEXlSjEGAt2OLGVTc6ELAjsQL2qxJagJTmO+lCAiNVmtSfwarLFTYJ2yvFf
OxmDwGjLSUz03i9NYoK+SqW3SxfrDYO5eXt12EqKr467h2CvexwmN9ECgYEAybDB
ZD+va+icUK9jTMpifUk4mfD0sB0GqaiBOPEgRAV2OLErhwHgpqVB3k4bX9ai4/Mq
iyXDp+qI6f8GRtMXSQk+hugDHAU6EKGWZP81WMMIaXUb8KAKU03nWJb1a5GJrAJ1
q5vipU4NvwRpHulUuZf6lOA9la9U9hZ3HD88m90CgYEAtlYFcaw8I9UUQZMX0CvX
3vZn2eFPqCu/wlKesHmIw6p3+wUUY0kUaGB90qJ/msAxbGJ0RZGwK+3rtxRXN+p3
R3gJzNCcVcZQFLwWBitwKYi3W7VmrUIax99MQj8D201D0ZabCLQ+GkwvoE/EuZBe
BdEcVBj8+IFJ8asKNFzjK/ECgYAtdf3hTsmHlSLGvQGw6V1RyBNN/5XnrGM4Epct
8ovHSUPge27IO5Abf9xc81YQQBzvLHxGaPi0/JRnyefsRuBUwhSp69nnkvYHkaSI
l026+BsJSjBGCIzLQiAHQ9+Fo4RYlSVYzQZFJFbM232mTgme27bLn8/B0YdhAKdQ
YqCSsQKBgEka8fJ/4reO8gl79rLSYPm9Tl3jQ75jGztoKpbeotJP32+QSx5jU0bF
QBFjbProC+TyYQqmFQOXwOnQPagNnTNQEWnOgpboj6U3jRJWdTawkExk/m0n4yzG
S60piinMbX5m3FHceGScjAW7RZ6fIkf18tG8Zr2t28LlrbVcQXLp
-----END RSA PRIVATE KEY-----`
	keyInterOldB string = `-----BEGIN RSA PRIVATE KEY-----
MIIEowIBAAKCAQEArX/gpS53V2WnbFRlUL0HWqznlfYnEJqgt9fek600I1YT65FC
/u5cBOFDcYuWILI8kJT97U2rxEPZ+K4huVAXEbOgjmwIbHQ4lm3fqeumyhba5Cjy
/bm8l0BdKMq4K3Ore5jsKAzo3GjXT4s+wZJgT99fP/AqG26BuJUR9Vtv/GSEjM4b
+QFuospf4PpyNzo7YTaX7ZFwHyg10pjAHEeMLHC/L7UQfoqaOh2Bcf2AAepyzceA
cLLB13UNcxWOqVb3jnzPclQNQc2NF+0WAmDRyU7mvwT/bx14nEHBrj0mOnEnF4Zd
Q7BOXX8CpOx4zzJQfGa4VzMVuaeCzNGN6hDRZQIDAQABAoIBAAdPMN6ko4B6FuCY
eaA6JnoqeKM3uJOZgBXesVDVZjHq6XHuL71fu161Qssgz1VXTPfmXwBFWmwtU5yH
cYJGHoKvZ584a+5twwiLXnXhKKiw583e78XCsnBI1OPoDnQ+LkZJvgE98f1/KTr/
qcgr64TR60hdTNjVAgANv7DvhjtCyxNX31dRm12k8TS2SdAeOeXOQbVeqix6oZDA
8NKA6vuQ0jvlrNQuHuCdLBFc2DSRzsCrTqvhQiHd9ZSQ1W1gRRhO6QnA9os/eKnd
xsO0jkwgIGdMnjcElVsfe9OwmzjB79/KAsR3Cj7Ls8BOMbyNAXB8lCAfbmLVKWOw
fIZWRuECgYEA2DD+HXdVKw3ScBQkqjOzmT0mJR1eWyxJRBw8XyS7uj32hvfL0oum
83cqlp5LU/tJEqdx3z2lwqLB8cA2z0iQfl/Bb3ybXy9p7c+FCdS5zDbrUrSWI9Vj
mVLEgKOYk2dkvh7b8h3hsk3zO5BSB5qgstScHskAJtHGoe+dOXmpiQkCgYEAzXJw
5Ib2eCGA5elBGjgAd00f+k/XJVjJzMYrRsdbGNFJ7li+D1Lzr8esS0yEr74fQm9k
bu2Ea05IKRgsucud6To6jfrp4v7S5PocJOPRTUYiQRwMP63dcSmzf/t9RLhsURMx
vPmwsBp96WLdMl1juGfn17SgS7Gt3JzeRAtDqH0CgYBsbIXFeWe5ZAE6PJ/2zF8y
ZzyOOKBt0VQdWJvei6mqyhCtt/D88xUT3Zv6VgEpaUlIlbnCYESVzNK/z8qtQpNV
DekRZMj3f+v8XKs4NvvHs3Np0y/JYOfGqX/rlCCdLKmVwBxG3T2oEvf902+QaLhX
d9GkjuIIlgSsimOrw5yHIQKBgQCaxcg+oV40iijtC5g8BEx1k+ivTk6qmAUO+4vG
upDqVWD46mnkaX2jwy0NXQvoybYK+pgS6WSE4miCbO/k2HySI4fRRmHE3GxMjA9/
yxD2wgs0OckQgA7/HYdYt0Fb8APJ4EfsMb7mLE8G76/sLWbemYiTfEP2QljUhmj7
ofDKkQKBgCadWlDEg4+MBmJeJoi4/ItCtJSy5+YpfiosaG4sNk81rQ3hSx/cZh3I
IzFGIvC3QRS60FK09CWVeQB9wDkWkFWaxQcY1LjbAF+N7hgbqlYdpWEtRPBPS9fd
q8M+U4NYTMeleS+vIQLthvLf1iUJ91CMMI40u4OMHslcnlS53CaS
-----END RSA PRIVATE KEY-----`
	keyInterNew string = `-----BEGIN RSA PRIVATE KEY-----
MIIEpgIBAAKCAQEAsRn9MTpijClANF8DlSTVWcRdfClCSZr77asPV3wGbus5KRab
dncNC9jzVkzSNEnNcN9uYVVBRuiU8ia3yyb6RYl6zYXMXSjs9umByGiQem+Mhy2t
4B+gxH+h5lvRaWtgUg12H22e1J+rCyEhrlH0SjVqIYl1rMOcyiFecgJ5+jrwH/5t
Cwy+ZO4PKCDXtLKZCzb55Cr3kFyotcBDyhAKOmOnZwiyzLUXgWOTz9J8Lb7xEUbt
YTW0Kkc/AlVKleYp6S0jevIvTvqVS0CKFqjIz4d7TTg23vl/bH+lZAULnFiEsixr
kvFejMTp30SydtP9Oq1m2jOVHwhyrnRJfGz03QIDAQABAoIBAQCLa6NIgucb4kma
MQZ3/kQ7Y/wYh76YhXs48kakn43M+j7ImvSOQVCy9/sxAE8nPMaPykVyOJSoBudi
7poYQzoZTg6wB1oIKPTLuK4kIDVFPdXKgWp1m1CMANJqr/Pe4to0HkbUnQ7B4mTb
4RxLyFbhqMVBW56ZAHHJKpXYeRyfoUDYr5QX9ZhvaH7xoVSjUD7oGD4j1W4jhhl6
W85SLxw7k/JkJwLenvEHZ+CoqCDmzyYNfkBLBEboaarRZ+8FV1qCLNPip7gRl8XY
Mt5nENsx+wFxiSIsoEscD2mbyq6uUDw/5VLXVAQpdtF2xZy0irQXeEZexzVXgz39
2N8DkQv9AoGBAN7Zwvhj/CojXj9PXbpaeUAsSHpLCwuReCOX5icgupnuEvmPkoq7
FiTK59OZe34gAeZUjaxyctN67RGqx0VbM/G2/PfNTTDCKzTdmbh5IZsVK+mcsKDj
GpA0Tn1vyLXW0Mmdun7nJBTd2uKHMrlL7F6JHSSo48Vs5tIW96CM1/C3AoGBAMty
FWJORJU+VjywzXGsCBqhwWX/zwSbY+WyruUxOTkgzaFP9GR3kb3AqmwZp/K9peAd
u4W1WqIaFcp3MXLn8w692XdBegzjb5mCpFb/MnKcLGJYY2ewvsH8JTMSmyovqTYC
t90tQQReLxbFzC5/WsDEJiYaXCu8WZmjwORRYEsLAoGBAJJEbaLoxU7HDgoRxpwU
2/aR2jRiYuqB3U/HWGmgIrn7t/qTEIT8DKmzf/uzhome6oBKSP7B07oYuddZtxc/
qFVjXKAs4Rg6qW82b7nTz4nhmIPps0i2Ju41VrsgDqXDTCC45Pp8LYOApjT+tf1G
5uqZpkY0j+M5+jo0lu2K5AT7AoGBAJMhel2SBP96CZvysWFX7LR17wv5KJpIVsKz
qtCN/LhYBN54mGJgJsJ4J8ft9gwTI3cliYx1T4qUGtZFxTk4jgtHOZKJg972TKtU
U82m2bERSPgGvD0tEYfw9mYtOpITzegFpzsJk0+5XYy2l6e46sUmFgDQZ4ApwxLd
3o5AW8dpAoGBAMVCWmkY4P9hauBE36NnswazYPBJ2XLWZw/m09KNkHyi7UcaN1v4
RvM82pUlk72IpAbiVH5l2yg2tRkgl0jhL8BhcLclnkAHDeHfyuWqKmxG0R2ATvBZ
m12+hN05qdBNTehGaoRTEwpxl36cBhhhkMNcRcBdNGshEloUCgZstkHr
-----END RSA PRIVATE KEY-----`
	keyInterAlt string = `-----BEGIN RSA PRIVATE KEY-----
MIIEpAIBAAKCAQEAtJrkpvq8Epa8ln1xQXGm6gx0+5bHqxKjsmk/efSkWxBmFFYB
KtaN+RbvN0rGMUi2hoTC5knonOAV28HDu++VVaE5IhSyDFkfr4OUJK8w0PEuiRBE
nHvQPNe+BYSS9JXLVd3L737ItDeAO1dgZvCgDhJ7ypvHfgltUxJSPWBnil7Cjl06
eNdx89fhrlpBYbgGRleJU5LwVvSiAyhq4mNt3Oh4blO5oqJcXQoC2FhUQSqr+FWu
u4xYNm36yExRXEVGYHdIxsfKgd/5LNBx4egQF5MoFKxz8v0hXp/3IN05NCX5Umcp
D7S+WCbhIUpdT1mHZnYe69WjYQHP6j4dra1PkQIDAQABAoIBAHD2PLPQOhgqXfSG
q3LygiL7/aNrEKIIu4iY2dIO2Un3/NEVZg+EOTKmTKM5yrMCtt92ZG0jpzGP2zwj
eqiu1qnDeHe/mAmvKOlflCZJyW+2mpOyMCfsLTgQ/NJ4tG30z0R6wNagZyqJWFRF
d4+LS6DhoLn+K43CmbWOzQ+En95kDitiBH4UAvaACivwlxMa5xld2bD7YO9bEHaG
r88yTW29+AoKIxhoC0KhII+E1Ms3Ju/MhD70kdaPYTSlkTbNkoC53c9B2zFyKx8U
EKXF1q9TtO+J3OKEIfFKIeRtEseXnhx0Y6BZyTn2SEPVTAVwEHA6YfmtanLUS3sy
hjYaSgECgYEA7zZXTu/W8HhXLRL4SULx+ZVEBdaSc1v4++bUtga72MFRrxO7cY5k
YTeqci6QOVKQCwQEsXssnLCF6hjnwqUafbBVUX5tPGQcTMvatVAMY31sCGclrbeF
ZXqkc9gfpQ93n3WnlkCdqllfsWaYy5CyBCZicDgyi9lQZm13ymrOZqECgYEAwUef
MtY774CRUem8xOeVlCf/wNL8hEhkpts84L6J2ETnvtFsLTVg8Bs8HAdYjNh1Z+w+
oLy+VLmdsqsqii3ah79wAoEuerw8ZBT49fvLK94Hvu/gpCSqhh25zh+/LRrHoj0C
hbU+oDWdWRJ/qHKuGJKtkI/H0Da36VTRQhbLcvECgYARm5ZhoRXZLYJ9NuA/xEW7
cVlIdLri8uoo4JzXqTc6hUBV+sXZXfnVjhtlvDexgHpJ1UnjJoXqIrQ4vwyQL0b7
6XbeQMgZoeTTYk3++p1u1VSWacFEQDX5ekWQoV/y7miHvElRrf/tAhchH8Qvd78i
vxCP4hMWaDCa2YPvylzXAQKBgQC29SpQwBUKOQTWqlBjf+jKzzY8/DvGqJSGkh/F
ivgHPeq1aZ5iCRZTEyTKT3XWFYzFrA74rtHod7A8keR52r/zIhdQd6Jc0lTEVEn6
57fCNbHVX1Khbofw3rCk2s5oTuJMxD3f/dpjY30n9Ofct3nvjuE3Z7M4eKOM/xn6
2oMJsQKBgQCsaM1HdQT4Ez6uRG37k2/zbf4Zi7fD01dN7rNg6+2KIlxlh+j+0Om5
zFuJQ2OvncpxvxdWT+B0hh8sBgo8EuXVNWDNJ7g00SHpY+4Yus7jK/BMWsjIR8mt
eR4weEWWeIt5SzP4x8Z1EFUa7DTSJlyIepUIGWV+b2cfUlB/oxCk/Q==
-----END RSA PRIVATE KEY-----`
	keyCrossOldNew string = `-----BEGIN RSA PRIVATE KEY-----
MIIEpAIBAAKCAQEA0fnJtZp0ISA8CTW3yMGhNf/Yb9L3YPsXVrugwnFBQcV75K6C
ZNyLQFgbAyVSzkRMriW+vL0UETRFcFv5jGt5QMa6Yvm3BSV8U8BA0ah73Pc5nz9x
T4NZIV1oPJprx4cZufHjRQZ6nOTdZN42vYgXLjy/ZJJte/jOwyxfMbjYtVpGsosS
FceQh3zdrwHW7Xp/lDwSziw1wyAlliiXmMyKUkodDQGmJGKgiDTrpqrRIL+hRPGS
xfxjVXtb+DXY22NeWXLQbJDqOn9wdWPL7C+YPsgHgzi2ExgSSBYWzzSZ4MkZU/kc
U34UKc10rsXvS8hUlI5krIknPTndlpd1enUQhwIDAQABAoIBAQCD4UlJYIsTyzUp
661U0Bi628hK48wwA0SzWwErXwrHjou0I88OHl7vuOauYSDTIJ6wulBEJtWVwKjk
W0Ava8kqYCbsxz6mYtblm1ia1iGFtVlhpe07LZorlIlFlw+esEH+Qeimj90u8agE
FHV5MSKuDcWAG1/cf3cNqq7XgevKapeyBH9ITJIJqqoT0u89Wi4GHQBf/uzK2BaC
1yNH11rHdv2EqnvPH0wlVMRlrhL4s2C2iUcD3N78VtRjOTdhL+CMGuJEN10tSKhx
yvBci/8ELbevVCtQogGxXxyLqnHNIR5qZ2ADlkFoFmEfLuElb9ra24aJ5fllPITs
XxAm8mFBAoGBAOzmTYHSl+MTDCTgIR0NbyOpxiWzSmrcgyjhFQ5i2UtLWwCrKIma
ivEzl6YDh4DknEPr1R0ixiiC8lDpICi+OLERgviMia9OSB9JXVxZjnNSETt5zf5c
fr+VItYnBXF8IHnme6O4CDqA/wavLqmefe51IOVdP86OZMkS4hKlKyU3AoGBAOLn
xBq5gO/s8RDIoJkihSmJmC3hG9nwy4Yvn8f1KmuTx0OEMPNIKNbYH2HO2106fntA
S83IgO5avWFrkY+POKwJiSKMyoInpiWvAg50dqgQeHruI8nU121fEkM9R71pNJw4
s6a8e7o/6ZnCpDgBPs3k4GjMoK7APAvdNGs3fRcxAoGBAOiHhjyPwZaZ86medeJW
dWjEFEKdIcaSfAt8I3bjf/ZwGPsnBbtLfmYTBh9mB3N08g2ZRq46m9bX8ZGJwo87
Z9omHjBpghwY8qIDGSi0nyaCv3dpr9CkaaUTdgZOdwFVnWsJ2QJyeWEzjR+6hErp
zyJoxcldJmxRSIw1hMJYbWkxAoGAV8O3mXKpCaRHNeu0Gqc8hG2BHDXW9PxrbHKd
RdVxW/zj9Rx7Zo5BpaAgu08skCng5EFhUK4+GHOmjrjxq2qFTB3AGkoExkUZwbeo
fvjTMHx2bW4RD68wyFAemz1nsz6vJ8HS0ypSXR79dwjPRg5NQYxGtKJ5gD5Au4IL
FXF4A/ECgYBihHJplYR31skcVC+PwQg3ZJMoWYeczBic06UFXk3G6WrejImSFa4Q
92TcRQPri9lp2hIwuWZ8cKziChgoG+fRPYUAEMKSGq3IHTjRM776Hj40lZhNvUhK
iNWuU8OZ9mOlSP5WaDZ/Q4U8CrqYxAnXtQCTKdJaCJIOWHUwIBIMKA==
-----END RSA PRIVATE KEY-----`
	keyCrossOldNewAlt string = `-----BEGIN RSA PRIVATE KEY-----
MIIEpQIBAAKCAQEA0N8RELH4wa9uoXRoZ/SnaLLB9iP0W/nWMl0fcW37X2RpTQbP
GQk2m9d25A20F2RUA/5l5jXKcP2HgqYvGTqOWDX1KZZeF5U3V4sVLMaEK13XENg8
wxE2oIrGNFY/rJRVzwJwGZKRj4yYy1/u+IjiTi/FZ9zY3JgnJ3od5ACip9RGxO1z
90hPqtWqIklfAV4tNyZjTxmYWZYXw/f1jmQpzB8AIBYh7RCv1QOAaJDNsWzxlCIg
z90aqSk7dELEdqQejZ0r05ThWzRIyC6m/RoU7fqK7YYR/WmUfEvq4mxVBNLfvqmy
5zSYLuLJ7lbyAsSADJCqZfQpqRhmzUYnFjT9iwIDAQABAoIBAQDCMEFrZitB11ph
nRpcW+cwvdD6iF7tDBAKbu2GxZvJCk+kH0p3mks9BEsyp1Lh1JMPy3rtVuFJv0w3
OU3chMZGWJQAAB6mikITj+k14bKLpwkGTiPfr6c8BwlTK0SzrI1Ckp+qBsxxy2Na
4WwJgSn1SxCbCYZNQOBWIYCcs8KFiHVnS732kVSMdT29qgcklCqtSlqxJg+XMZGg
a/0/8oDs4Av8pd4kufBq5Fy2F1w9+lz+QL7NRTBC3C+d9gGJQSm4cOrijhTVdWBM
jMzKrktt5OnhfdyEunZQijyHK5ncq6amNcC4deCu8XMpMCkrJvyphoMbavjn1Mii
LQi5MC7xAoGBAPMmvpxMV+M2DVRyZo6KI99yYZODGwnUSF2MgmC11bucBgT5cLm/
Oo9KeTGDMkiUwANeO6iziR6221oSuy7e/G0329A5xyH/mDgYTcqaOh6nLFlOuYU4
7mFDkXlawJszjaCBr1PT8O/L8PZH32XSS+5bKTx6AJV+GKoGF3YDJqklAoGBANvo
mIxISBAqfeQU+eCdKYR95rfd8LBDIgLYNBsgo5o/dE+BsbSreqEnwjt9yLmkeajB
pzCELGYx5ZrAntrHMl+GMkgD8onssCH9QfyMCXkJRKlWXZH94xMb9C00++DoUFVj
qgRli3c5mdRHHrm6gf+HDlIGE4ryR4oyI2ToboTvAoGALgoDA2MtLPdaFMhIhOrB
Ghj1QtILN5Q7U4M8WIV1f71uIlj8sB72PpVyVx6pUbbgmIKqNyovZ2JmLCrpyFku
YJu4Ajg+bUCRGOX5LMiBArbSneJbHE+IS2BY1iqJ15kuUtrbULsLnsv1xxwav5PP
DsWyDCJpo+SpVOAsZwr3sgUCgYEAq3VtC2OIHGKlCWJ5eXHQXycy7oUzFpshN4qP
Bd+q76ct7pe2kKFq2aAARxZJnMTqvnNPAfrsCzo4RTKOKRJK6kPdjFzXjEZpBfdK
rbgZ4q8hQ8684glMNSgEeALpqHA5wnoUo5zw4qKcl/Bjunf6x9rrhXSLZDiHIu74
vcKj+S0CgYEAhyGs8YqheBnc5xRh7Ib+jt3tlAIbAaBKZ3pQvVbo94V6RWfuVnd1
nYVPid/4ue3JXnCrZ49HBTSmEo/9OW9bYRoOJu1CSWl/iZ2+S46H6ESSbsP2gmGU
+MoG1q+0bmOcSIS9qpKaoVfdpBeqUaZoa8XmhvOp24dELER3leZ7hKM=
-----END RSA PRIVATE KEY-----`
	keyInterCrossOldNew string = `-----BEGIN RSA PRIVATE KEY-----
MIIEpAIBAAKCAQEA3DkwTH5vrQLnUZ+GqTn8QgqPMBWGgogoxzZWjMzbfk5YKAP1
ZM+nX1fAoxI+qPhHIs99CvfBLGdiyqREgRVSvIzFxwrd7fRo9kUO078VTl3vf5e/
2wdHrSwMGVMjNFY9rOb1rpxluA9SJTBs9mCFNzrIOLzVBlqH+sCBozUxA4xR/UWy
DLCi9YB9iMlVTF0s6X5OGOYyxc4jKozxyqYDsVJxnIR0IXLfqa0NOHj7hzjMI6C0
spehK41r5OTmaV6rsuDgSOJ66kNoPchz/neZge8tclSQuB4Tljb/QBHOwFlfk9kJ
wHuu98SIyKcFwBA6g5APqdZQPr7PLzcvQyvEKQIDAQABAoIBAGpHfzOrYSHR4OjX
YBmTTlZg2jGOcdfU9jkN1D8nLlaKYKkPIAKC5Hdy1hjc2TiaeVonYGVGpAdV7at2
E0lojQFJvrkMWYZZCb6wHTO7aADl/ItLJOADZ2f/dedS5A6CAEnNPIwEFmL5od8o
u607b47z42TeXMAwOKee9/FX3kujK08A6a7rhHbHm1zmg2qE/1IyUiuytN8bp3D3
VxP8/8+7UtyZBeevktsP3LUNsQVLQVYZ1RI89xqDlXqpJ2mWYzpO+Xo0OuBU2oI4
gZS3TbtlBTg1lHOqIfLtZ4SeVr8k9ACc/4owZYgYaLBGEjR1m6yXW9+d/MPq/91P
LjJJ5gECgYEA70H+3uLlqXb4a92duUjkcSEMaW1Hyinw8099IzSovmP3wP+U09ZV
9TqUILbZgzyyGFbA2tkWRlsi7fnwsR+1/2AGZEhxC0+WcjVouOIY1bLgopChQ15/
9k7MNzE/IDRXRI5izj7tM9uvTLQD3bhj6/dNBUygRuqP2FapEbnq1TkCgYEA66I3
LndKzS9OUxjg8mrxczvrCuxEbhkfu2zcyA0iPwPmNgll2CtW+niopPrBg1b025y8
y0eZ0gc1GnB8NFvnkucN/zaxLSGGgd+vUEqQaRGA033tFrBM91NFqIoQlzEIdU5u
GtABSi9dEk8/pMm9E6MxMoTjs0HLquu6zHx21nECgYEAubG+D92IpFOLEaTqknDp
pIgi6vx/GIAe26jZFeb8BPDvzKJRL20OQAucBhwEi+Ai1dMXUYPlzutTG+K+Faro
BXHQ5Cp5Wm8F9FRRmBUbc1inEmUwVGpW5KNZyoh1VxholvPv6eVbEsGxt9WLnp1L
KExDQhar2v6YcC8qf3CNu7kCgYAMqcERbDPG5x3sdU/Rd1HWgYfWJHBhAlSkO+t5
jMskW89JZCPnBB0+hLF7fEZeCpRKIRg8THLFyMFf1F+4aJ//Uw97gbLv2/dgj2ba
h8dO/jPQKdpN99eLCxyZPCI8HdR4iWh9ZGRNWlJEI6Il9vmETqbcMiwSfBy36Mc3
KhEw4QKBgQDGV+jW80iUgeslgL7Yw0deWozmuGKh3x6K2FMVkqkrlE7rqJg5yI82
3uqqf21qqHftO+bGl/3w/DML6bVnaAES/YMOWhyOv9iMFDINuEXQe3h6/xD0IoC0
no/jb1ruLXF96e9uk1d1OMuAy+my2GM437z9ZMS2RBL96O+r0GFEvA==
-----END RSA PRIVATE KEY-----`
	keyInterCrossOldNewAlt string = ``
	keyCircleA             string = `-----BEGIN RSA PRIVATE KEY-----
MIIEowIBAAKCAQEAppLxvknGt7yA1QuhL7FloG2NL9LjFQYaK6FQA1WlhfalNJpH
2JhFHGIkq67RxWTBw/iyFkrOe8ST5Qr1uyt7BcB5kUEtma1F+KtSBAjibA4Q/lJ4
U7tJTdQ7uS8hvN8nNoFymZIkFDYz2GTlK5BOwpey0aGwRqDDDHmZVvdSnmpPaJUI
LH0i3fICJXbCntkwOwRV4YdfuWZdCU7HJey98pKYxiDwFmU32r2f6ZWrAi3ciz51
bY4K+8zRHv8XVuaZe403IMCzPoRVpJuid8Xsm8yiD7C4uTvMHKv6W/pR3P9HDEj4
IAe9tc0zmQXAlJqa/qF2QoaPwQsbcsDQSnFvqwIDAQABAoIBAEYaxf8uEaI2hYok
cNwfrwPL14XvHX81qEIAjCo7G4S7/1+aJu6zdzKw43oWA1cuRpZxzpGvPiO84fmd
mToC3K3ZCdDmO4jX8gDsKYJlMtYDPYersdSbmAhXcCNKAMr6qAg6hr63UNPo0/0Y
yZKCE4O2UJ4FjKjM9AoGC1EcmfrtWU90aWvmvxeAzwbwaDgc7LPJS995GgHLjob2
7Aqg3NhdJDOsNIY8M9S1/Shbo0HS3Urq7jRSZMRvvyezSuAKjCjk/MvtHxC6gZ53
HLENdF2miuIqG8g8bmc2yti56e45MMxgfN4UZbdpW/NaRj5pxrJ4MeMJCtrjv0q2
uOID7TECgYEA0q/tVBQz5xW9tNCdSDlVAAZYKLVBoixMpdDls7fKeeonKVoflPYO
aCegPrXI18LuhK94O0lu4FVijrk1sA5LCqw7GUjV4qmog+QwPuvWFk5gytXJeHQe
3h59N6jiVoi2y4wWj4pt0JfVJV39XX9/aKWkAR4mvPe/HN2+pzSPrYcCgYEAymY4
WwJJnTdNw+6ElFxydAcZz8t1TaCmsomlgdPZip2u+un8yaU0gbCvSOZ/QTMf8W5J
5sOIpijQbteXXwxD5v0MhwMO2sYcHiWxBp6cFkc7PP/nYalLbHI59BAH3PWL7iYZ
fFR4m5wE6DBR5kv1jzvWkK2LhXRGA/rFDi5b1b0CgYANU0UuaSyzM+PQuNUJyV5/
5ubShExHZofegOzWRgyPU2jwq5uNv1Y/7imrbbHrO4/8YmC3VzilBaF7J2mm3fCP
Fz+RpNKqSFK5LMiEYkQjGwfyLD1W2flN0R3YVF0kXfc5vn16zKWPaNr5Rw2MSVEU
nE1YKMEIeJ7kw32Yc7GWpwKBgQCmiaeTUvWJdCj7r/XNMahHSlR1w16Y6jhfrZzO
j6dvREHnWcLTlKj4kY4ZOPe6iTueZ3ZNd9Sni+u9WI3H+oqgtNSq/twpLVuTfsYD
wVyDhEb88T/M/wT9jZub89jUegKSiSztPYAj4iOzfZbWHOhH3B+32eR0gfDec2fT
PFf6LQKBgEP+L5nBRf1TN/6bARCCjW0ffLR/BSFOC3xHHeUzk+SeuGIBlq0KaYm4
fyI9YruIL8yALlQesBGPH8afmYy4QuLEx/Z8nZFQo9RBX2l6qqBN9ba9rYHZWEu8
eDSJo8Thg+E3i2qk/1lbs/7tWyEmNs9OTmRKqGcFdSiolGJsOVCd
-----END RSA PRIVATE KEY-----`
	keyCircleB string = `-----BEGIN RSA PRIVATE KEY-----
MIIEowIBAAKCAQEApe9g4/RjHdmXGbE0+qHBlfCSGCOkEmF/1oUVkWCFe7h0S+/l
tQa1LIIpErkf8Tg+dGI08dAS1LUafz17xDy0wSh1AfAF03dIjVUOwPiXpeZFgsE2
kw3gABZCAk7Lm1WuNn4KrNLOoZjqe2jhAv6kxWV0CLUK0RidJMA6H53yRg5mXsCB
xBLMS2Xbns2J/s0HjStneZ7rKIgvssOZBWAEg10N50Cdw5hKXkyXqapbzyQiWHKj
gMkJd/v7T978OseWiVSW4R/ImCI7ZkYgdrz/avJjR46kSDAreWUckGSNWvClyHtJ
dUSwmvgRpEmkodLey5/7dXih16cYAhyuyg5uLwIDAQABAoIBAHofYDbEwUHRx2QQ
SIaBEAFzKYJ8kJ86hKR0E/iHihYRHf5ZU7zUb/iO3v25o6mblFOBh6fEVGeZ1iN5
M6KsbveN9/dyGEeXDZ1+0Tnye2GMxPHDk4/M8WP+/ZvHNBBhkbLnNqIVECBcc45a
FOhoUwo4bZqO66QSMm0+0Eg+rXUiqd1rGcySqqLGvLNvssVWT01KUxDo3k958ueb
kgHcyolZBrJ49LhwiB0kWQy6JERjwn8kQG3TFv2tGXlHdEIbQ+jQJoXm2x4f5/b0
ImoBsz6dMmwUF8ciTCJxssjuJ0UE3xaFYZ/b2Ry6BO6jNKFIvZrNE6t2G7j2ImWb
lIy5SkECgYEA3KiLcjF0GPa8TvvCzxfdSX6M9yvPVpiIqVAvEuOchx9Nl0Fuq6xs
3A8HvHDuVxx35cAA8F3qJmoxI+DBbO8KG1sQAFZLKZC0rd5wdup1yxGGKEj70dyU
xT9sWo/BBB0atlJSVhf/ITUm01vKEidPba/cOM/M5ZObzIFO82MbLuECgYEAwIMQ
T2BzRzaSW6m7jlQ1U5mZftW3gmM2JKNPC2soY9AdPd65ceUJz1ABF/SrTgpZMJRl
UySipEWZ2LjGOIkM6KuQOtENkOZ+jXJJDV3ePvfUhMi7FgAba/nV/1FISDDpN5xO
65OtVtZTlqEnvbjX9HD+zfcglfy7fQjlKKgnjw8CgYEAmRdCsDaJYuyEl5Pqg739
5IitiqtVjbIEVtvv3P4X0lOwhHl8LBVT7ZVr+5yqb7urn7YHsLynwIE6mLbN3CM4
cuRKBMHaIftor5y9kHN4yCvfVUHVnLOacANhzK8h7hW3O7l/sIWzl7mFt2xelRu6
6tHxS2U4tiskE82/FfOzn2ECgYAXrEZGLIsgd7J5uR6KOwqvtBSvByLg0shmqvpe
Yhf+ZioiYJAXVF3nc2QfCQRDvXwIQEdReRDS+IgZoWcmrpu6xNYglXKAngdz51ja
Xu+keJ9WkMSIyQyWM4vAMMOdtP4Iy5zc1TUcl5CB1mFnsCJGOdrrgvcr2n9Hud9M
J5ltuwKBgBV1GCy/6LhCDMDjX8b5bOX4G9uwX7EuSiJodjwzlwGcKj80znKC2g9x
02KKqIblfPorl/VRlOElAJNmjABBTR17giCD6IRswGGgPb9Z3UWR7N8v5rKszCWl
E3gZFrRez2y2jC0U3q39F3m8PN2UeOLvpgQqZtJlFVvsd+qOk4u8
-----END RSA PRIVATE KEY-----`
)

// Helpers for test scenarios below
const (
	certAnyRootOld              string = certRootOld + certRootOldReissued
	certAnyRootNoAlt            string = certAnyRootOld + certRootNew
	certAnyRoot                 string = certAnyRootNoAlt + certRootAlt
	certAnyCrossOldNew          string = certCrossOldNewSignedOld + certCrossOldNewSignedNew
	certAnyCrossOldNewAlt       string = certCrossOldNewAltSignedOld + certCrossOldNewAltSignedNew + certCrossOldNewAltSignedAlt
	certAnyCrossOrRootOldNew    string = certAnyCrossOldNew + certAnyRootNoAlt
	certAnyCrossOrRootOldNewAlt string = certAnyCrossOldNewAlt + certAnyRoot
)

// Each step of the process we import a CA and (its key) and validate
// the CA Chain at that stage. Each Cert import should be unique, but
// duplicating keys is expected. We map PEM->PEM to ensure things line up
// nicely. If the import errors, the chain isn't checked.
//
// Note that these CAChain entry fields attempt to account for possible
// alternative orderings (via concatenation of alternatives). Thus we
// check results to ensure exactly one cert in them, and that that cert
// is within the expected chain field.
type chainBuildingTestStep struct {
	Cert             string
	CertImportErrors bool
	Key              string
	KeyIsExisting    bool
	CAChain          map[string][]string
}

// Each test case starts with a fresh storage view and then validates the
// specified tests.
type chainBuildingTestCase struct {
	Steps []chainBuildingTestStep
}

var chainBuildingTestCases = []chainBuildingTestCase{
	// 0 - Fairly standard chain with some re-imports.
	{
		[]chainBuildingTestStep{
			// 0.0 - Import the root.
			{
				Cert:             certRootOld,
				CertImportErrors: false,
				Key:              keyRootOld,
				KeyIsExisting:    false,
				CAChain: map[string][]string{
					certRootOld: {certRootOld},
				},
			},
			// 0.1 - Reimport the root.
			{
				Cert:             certRootOld,
				CertImportErrors: false,
				Key:              keyRootOld,
				KeyIsExisting:    true,
				CAChain: map[string][]string{
					certRootOld: {certRootOld},
				},
			},
			// 0.2 - Add an intermediate.
			{
				Cert:             certInterOldA,
				CertImportErrors: false,
				Key:              keyInterOldA,
				KeyIsExisting:    false,
				CAChain: map[string][]string{
					certRootOld:   {certRootOld},
					certInterOldA: {certInterOldA, certRootOld},
				},
			},
			// 0.3 - Add the other intermediate.
			{
				Cert:             certInterOldB,
				CertImportErrors: false,
				Key:              keyInterOldB,
				KeyIsExisting:    false,
				CAChain: map[string][]string{
					certRootOld:   {certRootOld},
					certInterOldA: {certInterOldA, certRootOld},
					certInterOldB: {certInterOldB, certRootOld},
				},
			},
			// 0.4 - Re-add the other intermediate.
			{
				Cert:             certInterOldB,
				CertImportErrors: false,
				Key:              keyInterOldB,
				KeyIsExisting:    true,
				CAChain: map[string][]string{
					certRootOld:   {certRootOld},
					certInterOldA: {certInterOldA, certRootOld},
					certInterOldB: {certInterOldB, certRootOld},
				},
			},
			// 0.5 - Now add the reissued old root.
			{
				Cert:             certRootOldReissued,
				CertImportErrors: false,
				Key:              keyRootOld,
				KeyIsExisting:    true,
				CAChain: map[string][]string{
					certRootOld:         {certRootOld, certRootOldReissued},
					certRootOldReissued: {certRootOldReissued, certRootOld},
					certInterOldA:       {certInterOldA, certAnyRootOld, certAnyRootOld},
					certInterOldB:       {certInterOldB, certAnyRootOld, certAnyRootOld},
				},
			},
			// 0.6 - Throw in one of the cross-signed certs.
			{
				Cert:             certCrossOldNewSignedOld,
				CertImportErrors: false,
				Key:              keyCrossOldNew,
				KeyIsExisting:    false,
				CAChain: map[string][]string{
					certRootOld:              {certRootOld, certRootOldReissued},
					certRootOldReissued:      {certRootOldReissued, certRootOld},
					certInterOldA:            {certInterOldA, certAnyRootOld, certAnyRootOld},
					certInterOldB:            {certInterOldB, certAnyRootOld, certAnyRootOld},
					certCrossOldNewSignedOld: {certCrossOldNewSignedOld, certAnyRootOld, certAnyRootOld},
				},
			},
			// 0.7 - Now add an intermediate under the cross-signed.
			{
				Cert:             certInterCrossOldNew,
				CertImportErrors: false,
				Key:              keyInterCrossOldNew,
				KeyIsExisting:    false,
				CAChain: map[string][]string{
					certRootOld:              {certRootOld, certRootOldReissued},
					certRootOldReissued:      {certRootOldReissued, certRootOld},
					certInterOldA:            {certInterOldA, certAnyRootOld, certAnyRootOld},
					certInterOldB:            {certInterOldB, certAnyRootOld, certAnyRootOld},
					certCrossOldNewSignedOld: {certCrossOldNewSignedOld, certAnyRootOld, certAnyRootOld},
					certInterCrossOldNew:     {certInterCrossOldNew, certCrossOldNewSignedOld, certAnyRootOld, certAnyRootOld},
				},
			},
		},
	},
	// 1 - Just the circular bundle should work
	{
		[]chainBuildingTestStep{
			// 1.0 - Add A
			{
				Cert:             certCircleA,
				CertImportErrors: false,
				Key:              keyCircleA,
				KeyIsExisting:    false,
				CAChain: map[string][]string{
					certCircleA: {certCircleA},
				},
			},
			// 1.1 - Add B
			{
				Cert:             certCircleB,
				CertImportErrors: false,
				Key:              keyCircleB,
				KeyIsExisting:    false,
				CAChain: map[string][]string{
					certCircleA: {certCircleA, certCircleB},
					certCircleB: {certCircleB, certCircleA},
				},
			},
			// 1.2 - Readd A
			{
				Cert:             certCircleA,
				CertImportErrors: false,
				Key:              keyCircleA,
				KeyIsExisting:    true,
				CAChain: map[string][]string{
					certCircleA: {certCircleA, certCircleB},
					certCircleB: {certCircleB, certCircleA},
				},
			},
			// 1.3 - Readd B
			{
				Cert:             certCircleB,
				CertImportErrors: false,
				Key:              keyCircleB,
				KeyIsExisting:    true,
				CAChain: map[string][]string{
					certCircleA: {certCircleA, certCircleB},
					certCircleB: {certCircleB, certCircleA},
				},
			},
		},
	},
	// 2 - Old and New hybrid roots of trust.
	{
		[]chainBuildingTestStep{
			// 2.0 - Import the new root.
			{
				Cert:             certRootNew,
				CertImportErrors: false,
				Key:              keyRootNewAlt,
				KeyIsExisting:    false,
				CAChain: map[string][]string{
					certRootNew: {certRootNew},
				},
			},
			// 2.1 - Import the old root.
			{
				Cert:             certRootOld,
				CertImportErrors: false,
				Key:              keyRootOld,
				KeyIsExisting:    false,
				CAChain: map[string][]string{
					certRootNew: {certRootNew},
					certRootOld: {certRootOld},
				},
			},
			// 2.2 - Import the alt (new) root.
			{
				Cert:             certRootAlt,
				CertImportErrors: false,
				Key:              keyRootNewAlt,
				KeyIsExisting:    true,
				CAChain: map[string][]string{
					certRootNew: {certRootNew},
					certRootAlt: {certRootAlt},
					certRootOld: {certRootOld},
				},
			},
			// 2.3 - Import the reissued (old) root.
			{
				Cert:             certRootOldReissued,
				CertImportErrors: false,
				Key:              keyRootOld,
				KeyIsExisting:    true,
				CAChain: map[string][]string{
					certRootNew:         {certRootNew},
					certRootAlt:         {certRootAlt},
					certRootOld:         {certRootOld, certRootOldReissued},
					certRootOldReissued: {certRootOldReissued, certRootOld},
				},
			},
			// 2.4 - Add an intermediate under old.
			{
				Cert:             certInterOldA,
				CertImportErrors: false,
				Key:              keyInterOldA,
				KeyIsExisting:    false,
				CAChain: map[string][]string{
					certRootNew:         {certRootNew},
					certRootAlt:         {certRootAlt},
					certRootOld:         {certRootOld, certRootOldReissued},
					certRootOldReissued: {certRootOldReissued, certRootOld},
					certInterOldA:       {certInterOldA, certAnyRootOld, certAnyRootOld},
				},
			},
			// 2.5 - Add the other intermediate under old.
			{
				Cert:             certInterOldB,
				CertImportErrors: false,
				Key:              keyInterOldB,
				KeyIsExisting:    false,
				CAChain: map[string][]string{
					certRootNew:         {certRootNew},
					certRootAlt:         {certRootAlt},
					certRootOld:         {certRootOld, certRootOldReissued},
					certRootOldReissued: {certRootOldReissued, certRootOld},
					certInterOldA:       {certInterOldA, certAnyRootOld, certAnyRootOld},
					certInterOldB:       {certInterOldB, certAnyRootOld, certAnyRootOld},
				},
			},
			// 2.6 - Add an intermediate under new.
			{
				Cert:             certInterNew,
				CertImportErrors: false,
				Key:              keyInterNew,
				KeyIsExisting:    false,
				CAChain: map[string][]string{
					certRootNew:         {certRootNew},
					certRootAlt:         {certRootAlt},
					certRootOld:         {certRootOld, certRootOldReissued},
					certRootOldReissued: {certRootOldReissued, certRootOld},
					certInterOldA:       {certInterOldA, certAnyRootOld, certAnyRootOld},
					certInterOldB:       {certInterOldB, certAnyRootOld, certAnyRootOld},
					certInterNew:        {certInterNew, certRootNew},
				},
			},
			// 2.7 - Add an intermediate under alt.
			{
				Cert:             certInterAlt,
				CertImportErrors: false,
				Key:              keyInterAlt,
				KeyIsExisting:    false,
				CAChain: map[string][]string{
					certRootNew:         {certRootNew},
					certRootAlt:         {certRootAlt},
					certRootOld:         {certRootOld, certRootOldReissued},
					certRootOldReissued: {certRootOldReissued, certRootOld},
					certInterOldA:       {certInterOldA, certAnyRootOld, certAnyRootOld},
					certInterOldB:       {certInterOldB, certAnyRootOld, certAnyRootOld},
					certInterNew:        {certInterNew, certRootNew},
					certInterAlt:        {certInterAlt, certRootAlt},
				},
			},
			// 2.8 - Add in cross-signed (old, new) intermediate (old).
			{
				Cert:             certCrossOldNewSignedOld,
				CertImportErrors: false,
				Key:              keyCrossOldNew,
				KeyIsExisting:    false,
				CAChain: map[string][]string{
					certRootNew:              {certRootNew},
					certRootAlt:              {certRootAlt},
					certRootOld:              {certRootOld, certRootOldReissued},
					certRootOldReissued:      {certRootOldReissued, certRootOld},
					certInterOldA:            {certInterOldA, certAnyRootOld, certAnyRootOld},
					certInterOldB:            {certInterOldB, certAnyRootOld, certAnyRootOld},
					certInterNew:             {certInterNew, certRootNew},
					certInterAlt:             {certInterAlt, certRootAlt},
					certCrossOldNewSignedOld: {certCrossOldNewSignedOld, certAnyRootOld, certAnyRootOld},
				},
			},
			// 2.9 - Add in cross-signed (old, new) intermediate (old).
			{
				Cert:             certCrossOldNewSignedNew,
				CertImportErrors: false,
				Key:              keyCrossOldNew,
				KeyIsExisting:    true,
				CAChain: map[string][]string{
					certRootNew:              {certRootNew},
					certRootAlt:              {certRootAlt},
					certRootOld:              {certRootOld, certRootOldReissued},
					certRootOldReissued:      {certRootOldReissued, certRootOld},
					certInterOldA:            {certInterOldA, certAnyRootOld, certAnyRootOld},
					certInterOldB:            {certInterOldB, certAnyRootOld, certAnyRootOld},
					certInterNew:             {certInterNew, certRootNew},
					certInterAlt:             {certInterAlt, certRootAlt},
					certCrossOldNewSignedOld: {certCrossOldNewSignedOld, certAnyRootOld, certAnyRootOld},
					certCrossOldNewSignedNew: {certCrossOldNewSignedNew, certRootNew},
				},
			},
			// 2.10 - Add in cross-signed (old, new, alt) intermediate (old).
			{
				Cert:             certCrossOldNewAltSignedOld,
				CertImportErrors: false,
				Key:              keyCrossOldNewAlt,
				KeyIsExisting:    false,
				CAChain: map[string][]string{
					certRootNew:                 {certRootNew},
					certRootAlt:                 {certRootAlt},
					certRootOld:                 {certRootOld, certRootOldReissued},
					certRootOldReissued:         {certRootOldReissued, certRootOld},
					certInterOldA:               {certInterOldA, certAnyRootOld, certAnyRootOld},
					certInterOldB:               {certInterOldB, certAnyRootOld, certAnyRootOld},
					certInterNew:                {certInterNew, certRootNew},
					certInterAlt:                {certInterAlt, certRootAlt},
					certCrossOldNewSignedOld:    {certCrossOldNewSignedOld, certAnyRootOld, certAnyRootOld},
					certCrossOldNewSignedNew:    {certCrossOldNewSignedNew, certRootNew},
					certCrossOldNewAltSignedOld: {certCrossOldNewAltSignedOld, certAnyRootOld, certAnyRootOld},
				},
			},
			// 2.11 - Add in cross-signed (old, new, alt) intermediate (new).
			{
				Cert:             certCrossOldNewAltSignedNew,
				CertImportErrors: false,
				Key:              keyCrossOldNewAlt,
				KeyIsExisting:    true,
				CAChain: map[string][]string{
					certRootNew:                 {certRootNew},
					certRootAlt:                 {certRootAlt},
					certRootOld:                 {certRootOld, certRootOldReissued},
					certRootOldReissued:         {certRootOldReissued, certRootOld},
					certInterOldA:               {certInterOldA, certAnyRootOld, certAnyRootOld},
					certInterOldB:               {certInterOldB, certAnyRootOld, certAnyRootOld},
					certInterNew:                {certInterNew, certRootNew},
					certInterAlt:                {certInterAlt, certRootAlt},
					certCrossOldNewSignedOld:    {certCrossOldNewSignedOld, certAnyRootOld, certAnyRootOld},
					certCrossOldNewSignedNew:    {certCrossOldNewSignedNew, certRootNew},
					certCrossOldNewAltSignedOld: {certCrossOldNewAltSignedOld, certAnyRootOld, certAnyRootOld},
					certCrossOldNewAltSignedNew: {certCrossOldNewAltSignedNew, certRootNew},
				},
			},
			// 2.12 - Add in cross-signed (old, new, alt) intermediate (alt).
			{
				Cert:             certCrossOldNewAltSignedAlt,
				CertImportErrors: false,
				Key:              keyCrossOldNewAlt,
				KeyIsExisting:    true,
				CAChain: map[string][]string{
					certRootNew:                 {certRootNew},
					certRootAlt:                 {certRootAlt},
					certRootOld:                 {certRootOld, certRootOldReissued},
					certRootOldReissued:         {certRootOldReissued, certRootOld},
					certInterOldA:               {certInterOldA, certAnyRootOld, certAnyRootOld},
					certInterOldB:               {certInterOldB, certAnyRootOld, certAnyRootOld},
					certInterNew:                {certInterNew, certRootNew},
					certInterAlt:                {certInterAlt, certRootAlt},
					certCrossOldNewSignedOld:    {certCrossOldNewSignedOld, certAnyRootOld, certAnyRootOld},
					certCrossOldNewSignedNew:    {certCrossOldNewSignedNew, certRootNew},
					certCrossOldNewAltSignedOld: {certCrossOldNewAltSignedOld, certAnyRootOld, certAnyRootOld},
					certCrossOldNewAltSignedNew: {certCrossOldNewAltSignedNew, certRootNew},
					certCrossOldNewAltSignedAlt: {certCrossOldNewAltSignedAlt, certRootAlt},
				},
			},
			// 2.13 - Add in intermediate signed by cross-signed (old, new).
			{
				Cert:             certInterCrossOldNew,
				CertImportErrors: false,
				Key:              keyInterCrossOldNew,
				KeyIsExisting:    false,
				CAChain: map[string][]string{
					certRootNew:                 {certRootNew},
					certRootAlt:                 {certRootAlt},
					certRootOld:                 {certRootOld, certRootOldReissued},
					certRootOldReissued:         {certRootOldReissued, certRootOld},
					certInterOldA:               {certInterOldA, certAnyRootOld, certAnyRootOld},
					certInterOldB:               {certInterOldB, certAnyRootOld, certAnyRootOld},
					certInterNew:                {certInterNew, certRootNew},
					certInterAlt:                {certInterAlt, certRootAlt},
					certCrossOldNewSignedOld:    {certCrossOldNewSignedOld, certAnyRootOld, certAnyRootOld},
					certCrossOldNewSignedNew:    {certCrossOldNewSignedNew, certRootNew},
					certCrossOldNewAltSignedOld: {certCrossOldNewAltSignedOld, certAnyRootOld, certAnyRootOld},
					certCrossOldNewAltSignedNew: {certCrossOldNewAltSignedNew, certRootNew},
					certCrossOldNewAltSignedAlt: {certCrossOldNewAltSignedAlt, certRootAlt},
					certInterCrossOldNew:        {certInterCrossOldNew, certAnyCrossOldNew /* must be cross-cert */, certAnyRootNoAlt /* must be a root but not alt */ /* remainder can be anything */, certAnyCrossOrRootOldNew, certAnyCrossOrRootOldNew, certAnyCrossOrRootOldNew},
				},
			},
			// 2.14 - Add in intermediate signed by cross-signed (old, new, alt).
			{
				Cert:             certInterCrossOldNewAlt,
				CertImportErrors: false,
				Key:              "", /* key missing */
				KeyIsExisting:    false,
				CAChain: map[string][]string{
					certRootNew:                 {certRootNew},
					certRootAlt:                 {certRootAlt},
					certRootOld:                 {certRootOld, certRootOldReissued},
					certRootOldReissued:         {certRootOldReissued, certRootOld},
					certInterOldA:               {certInterOldA, certAnyRootOld, certAnyRootOld},
					certInterOldB:               {certInterOldB, certAnyRootOld, certAnyRootOld},
					certInterNew:                {certInterNew, certRootNew},
					certInterAlt:                {certInterAlt, certRootAlt},
					certCrossOldNewSignedOld:    {certCrossOldNewSignedOld, certAnyRootOld, certAnyRootOld},
					certCrossOldNewSignedNew:    {certCrossOldNewSignedNew, certRootNew},
					certCrossOldNewAltSignedOld: {certCrossOldNewAltSignedOld, certAnyRootOld, certAnyRootOld},
					certCrossOldNewAltSignedNew: {certCrossOldNewAltSignedNew, certRootNew},
					certCrossOldNewAltSignedAlt: {certCrossOldNewAltSignedAlt, certRootAlt},
					certInterCrossOldNew:        {certInterCrossOldNew, certAnyCrossOldNew /* must be cross-cert */, certAnyRootNoAlt /* must be a root but not alt */ /* remainder can be anything */, certAnyCrossOrRootOldNew, certAnyCrossOrRootOldNew, certAnyCrossOrRootOldNew},
					certInterCrossOldNewAlt:     {certInterCrossOldNewAlt, certAnyCrossOldNewAlt /* must be cross-cert */, certAnyRoot /* must be a root */ /* remainder can be anything */, certAnyCrossOrRootOldNewAlt, certAnyCrossOrRootOldNewAlt, certAnyCrossOrRootOldNewAlt, certAnyCrossOrRootOldNewAlt, certAnyCrossOrRootOldNewAlt},
				},
			},
			// 2.15 - Kitchen sink: circle A
			{
				Cert:             certCircleA,
				CertImportErrors: false,
				Key:              keyCircleA,
				KeyIsExisting:    false,
				CAChain: map[string][]string{
					certRootOld:                 {certRootOld, certRootOldReissued},
					certRootOldReissued:         {certRootOldReissued, certRootOld},
					certInterOldA:               {certInterOldA, certAnyRootOld, certAnyRootOld},
					certInterOldB:               {certInterOldB, certAnyRootOld, certAnyRootOld},
					certInterNew:                {certInterNew, certRootNew},
					certInterAlt:                {certInterAlt, certRootAlt},
					certCrossOldNewSignedOld:    {certCrossOldNewSignedOld, certAnyRootOld, certAnyRootOld},
					certCrossOldNewSignedNew:    {certCrossOldNewSignedNew, certRootNew},
					certCrossOldNewAltSignedOld: {certCrossOldNewAltSignedOld, certAnyRootOld, certAnyRootOld},
					certCrossOldNewAltSignedNew: {certCrossOldNewAltSignedNew, certRootNew},
					certCrossOldNewAltSignedAlt: {certCrossOldNewAltSignedAlt, certRootAlt},
					certInterCrossOldNew:        {certInterCrossOldNew, certAnyCrossOldNew /* must be cross-cert */, certAnyRootNoAlt /* must be a root but not alt */ /* remainder can be anything */, certAnyCrossOrRootOldNew, certAnyCrossOrRootOldNew, certAnyCrossOrRootOldNew},
					certInterCrossOldNewAlt:     {certInterCrossOldNewAlt, certAnyCrossOldNewAlt /* must be cross-cert */, certAnyRoot /* must be a root */ /* remainder can be anything */, certAnyCrossOrRootOldNewAlt, certAnyCrossOrRootOldNewAlt, certAnyCrossOrRootOldNewAlt, certAnyCrossOrRootOldNewAlt, certAnyCrossOrRootOldNewAlt},
					certCircleA:                 {certCircleA},
				},
			},
			// 2.16 - Kitchen sink: circle B
			{
				Cert:             certCircleB,
				CertImportErrors: false,
				Key:              keyCircleB,
				KeyIsExisting:    false,
				CAChain: map[string][]string{
					certRootOld:                 {certRootOld, certRootOldReissued},
					certRootOldReissued:         {certRootOldReissued, certRootOld},
					certInterOldA:               {certInterOldA, certAnyRootOld, certAnyRootOld},
					certInterOldB:               {certInterOldB, certAnyRootOld, certAnyRootOld},
					certInterNew:                {certInterNew, certRootNew},
					certInterAlt:                {certInterAlt, certRootAlt},
					certCrossOldNewSignedOld:    {certCrossOldNewSignedOld, certAnyRootOld, certAnyRootOld},
					certCrossOldNewSignedNew:    {certCrossOldNewSignedNew, certRootNew},
					certCrossOldNewAltSignedOld: {certCrossOldNewAltSignedOld, certAnyRootOld, certAnyRootOld},
					certCrossOldNewAltSignedNew: {certCrossOldNewAltSignedNew, certRootNew},
					certCrossOldNewAltSignedAlt: {certCrossOldNewAltSignedAlt, certRootAlt},
					certInterCrossOldNew:        {certInterCrossOldNew, certAnyCrossOldNew /* must be cross-cert */, certAnyRootNoAlt /* must be a root but not alt */ /* remainder can be anything */, certAnyCrossOrRootOldNew, certAnyCrossOrRootOldNew, certAnyCrossOrRootOldNew},
					certInterCrossOldNewAlt:     {certInterCrossOldNewAlt, certAnyCrossOldNewAlt /* must be cross-cert */, certAnyRoot /* must be a root */ /* remainder can be anything */, certAnyCrossOrRootOldNewAlt, certAnyCrossOrRootOldNewAlt, certAnyCrossOrRootOldNewAlt, certAnyCrossOrRootOldNewAlt, certAnyCrossOrRootOldNewAlt},
					certCircleA:                 {certCircleA, certCircleB},
					certCircleB:                 {certCircleB, certCircleA},
				},
			},
		},
	},
}
